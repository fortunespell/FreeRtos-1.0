
prjt_tsk_1_trial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b7c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003d7c  08003d7c  00004d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e44  08003e44  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  08003e44  08003e44  00004e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e4c  08003e4c  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e4c  08003e4c  00004e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e50  08003e50  00004e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003e54  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041f0  20000060  08003eb4  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004250  08003eb4  00005250  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001146a  00000000  00000000  0000508e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a0b  00000000  00000000  000164f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00018f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be7  00000000  00000000  00019e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e4a  00000000  00000000  0001aa67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c4d  00000000  00000000  000438b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001032b9  00000000  00000000  000554fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001587b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d4  00000000  00000000  001587fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0015cad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	08003d64 	.word	0x08003d64

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	08003d64 	.word	0x08003d64

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	4a07      	ldr	r2, [pc, #28]	@ (800055c <vApplicationGetIdleTaskMemory+0x2c>)
 8000540:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	4a06      	ldr	r2, [pc, #24]	@ (8000560 <vApplicationGetIdleTaskMemory+0x30>)
 8000546:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2280      	movs	r2, #128	@ 0x80
 800054c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	2000007c 	.word	0x2000007c
 8000560:	2000011c 	.word	0x2000011c

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b5b0      	push	{r4, r5, r7, lr}
 8000566:	b09c      	sub	sp, #112	@ 0x70
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fb52 	bl	8000c12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f863 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f91d 	bl	80007b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000576:	f000 f8c9 	bl	800070c <MX_ADC1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of BlinkRedLED */
  osThreadDef(BlinkRedLED, StartTask01, osPriorityNormal, 0, 128);
 800057a:	4b27      	ldr	r3, [pc, #156]	@ (8000618 <main+0xb4>)
 800057c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000580:	461d      	mov	r5, r3
 8000582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000586:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlinkRedLEDHandle = osThreadCreate(osThread(BlinkRedLED), NULL);
 800058e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f002 f8bc 	bl	8002712 <osThreadCreate>
 800059a:	4603      	mov	r3, r0
 800059c:	4a1f      	ldr	r2, [pc, #124]	@ (800061c <main+0xb8>)
 800059e:	6013      	str	r3, [r2, #0]

  /* definition and creation of BlinkBlueLED */
  osThreadDef(BlinkBlueLED, StartTask02, osPriorityNormal, 0, 128);
 80005a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000620 <main+0xbc>)
 80005a2:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80005a6:	461d      	mov	r5, r3
 80005a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlinkBlueLEDHandle = osThreadCreate(osThread(BlinkBlueLED), NULL);
 80005b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 f8a9 	bl	8002712 <osThreadCreate>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a18      	ldr	r2, [pc, #96]	@ (8000624 <main+0xc0>)
 80005c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of BlinkGreenLED */
  osThreadDef(BlinkGreenLED, StartTask03, osPriorityNormal, 0, 128);
 80005c6:	4b18      	ldr	r3, [pc, #96]	@ (8000628 <main+0xc4>)
 80005c8:	f107 041c 	add.w	r4, r7, #28
 80005cc:	461d      	mov	r5, r3
 80005ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlinkGreenLEDHandle = osThreadCreate(osThread(BlinkGreenLED), NULL);
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 f896 	bl	8002712 <osThreadCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a10      	ldr	r2, [pc, #64]	@ (800062c <main+0xc8>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of PushButton */
  osThreadDef(PushButton, StartTask04, osPriorityNormal, 0, 128);
 80005ec:	4b10      	ldr	r3, [pc, #64]	@ (8000630 <main+0xcc>)
 80005ee:	463c      	mov	r4, r7
 80005f0:	461d      	mov	r5, r3
 80005f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PushButtonHandle = osThreadCreate(osThread(PushButton), NULL);
 80005fe:	463b      	mov	r3, r7
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f002 f885 	bl	8002712 <osThreadCreate>
 8000608:	4603      	mov	r3, r0
 800060a:	4a0a      	ldr	r2, [pc, #40]	@ (8000634 <main+0xd0>)
 800060c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800060e:	f002 f879 	bl	8002704 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000612:	bf00      	nop
 8000614:	e7fd      	b.n	8000612 <main+0xae>
 8000616:	bf00      	nop
 8000618:	08003d88 	.word	0x08003d88
 800061c:	20000364 	.word	0x20000364
 8000620:	08003db4 	.word	0x08003db4
 8000624:	20000368 	.word	0x20000368
 8000628:	08003de0 	.word	0x08003de0
 800062c:	2000036c 	.word	0x2000036c
 8000630:	08003e08 	.word	0x08003e08
 8000634:	20000370 	.word	0x20000370

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	@ 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2234      	movs	r2, #52	@ 0x34
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f003 fab2 	bl	8003bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	4b29      	ldr	r3, [pc, #164]	@ (8000704 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	4a28      	ldr	r2, [pc, #160]	@ (8000704 <SystemClock_Config+0xcc>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	@ 0x40
 8000668:	4b26      	ldr	r3, [pc, #152]	@ (8000704 <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000674:	4b24      	ldr	r3, [pc, #144]	@ (8000708 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800067c:	4a22      	ldr	r2, [pc, #136]	@ (8000708 <SystemClock_Config+0xd0>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b20      	ldr	r3, [pc, #128]	@ (8000708 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 120;
 80006a8:	2378      	movs	r3, #120	@ 0x78
 80006aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 f843 	bl	8001748 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 f959 	bl	800097e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2103      	movs	r1, #3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fada 	bl	8001ca4 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 f942 	bl	800097e <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	@ 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800071e:	4b21      	ldr	r3, [pc, #132]	@ (80007a4 <MX_ADC1_Init+0x98>)
 8000720:	4a21      	ldr	r2, [pc, #132]	@ (80007a8 <MX_ADC1_Init+0x9c>)
 8000722:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000724:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <MX_ADC1_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800072a:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <MX_ADC1_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000730:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <MX_ADC1_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000736:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <MX_ADC1_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073c:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <MX_ADC1_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000744:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <MX_ADC1_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800074a:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <MX_ADC1_Init+0x98>)
 800074c:	4a17      	ldr	r2, [pc, #92]	@ (80007ac <MX_ADC1_Init+0xa0>)
 800074e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_ADC1_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000756:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <MX_ADC1_Init+0x98>)
 8000758:	2201      	movs	r2, #1
 800075a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_ADC1_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_ADC1_Init+0x98>)
 8000766:	2201      	movs	r2, #1
 8000768:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076a:	480e      	ldr	r0, [pc, #56]	@ (80007a4 <MX_ADC1_Init+0x98>)
 800076c:	f000 fa7e 	bl	8000c6c <HAL_ADC_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000776:	f000 f902 	bl	800097e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800077a:	2303      	movs	r3, #3
 800077c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800077e:	2301      	movs	r3, #1
 8000780:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000782:	2305      	movs	r3, #5
 8000784:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	@ (80007a4 <MX_ADC1_Init+0x98>)
 800078c:	f000 fab2 	bl	8000cf4 <HAL_ADC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000796:	f000 f8f2 	bl	800097e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000031c 	.word	0x2000031c
 80007a8:	40012000 	.word	0x40012000
 80007ac:	0f000001 	.word	0x0f000001

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	@ 0x28
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a2a      	ldr	r2, [pc, #168]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b28      	ldr	r3, [pc, #160]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	4b25      	ldr	r3, [pc, #148]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a24      	ldr	r2, [pc, #144]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b22      	ldr	r3, [pc, #136]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000874 <MX_GPIO_Init+0xc4>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <MX_GPIO_Init+0xc4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <MX_GPIO_Init+0xc4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a18      	ldr	r2, [pc, #96]	@ (8000874 <MX_GPIO_Init+0xc4>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_GPIO_Init+0xc4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, green_led_Pin|red_led_Pin|blue_led_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f244 0181 	movw	r1, #16513	@ 0x4081
 800082c:	4812      	ldr	r0, [pc, #72]	@ (8000878 <MX_GPIO_Init+0xc8>)
 800082e:	f000 ff57 	bl	80016e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : push_button_Pin */
  GPIO_InitStruct.Pin = push_button_Pin;
 8000832:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(push_button_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	480d      	ldr	r0, [pc, #52]	@ (800087c <MX_GPIO_Init+0xcc>)
 8000848:	f000 fd86 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_led_Pin red_led_Pin blue_led_Pin */
  GPIO_InitStruct.Pin = green_led_Pin|red_led_Pin|blue_led_Pin;
 800084c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	4804      	ldr	r0, [pc, #16]	@ (8000878 <MX_GPIO_Init+0xc8>)
 8000866:	f000 fd77 	bl	8001358 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086a:	bf00      	nop
 800086c:	3728      	adds	r7, #40	@ 0x28
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40020400 	.word	0x40020400
 800087c:	40020800 	.word	0x40020800

08000880 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	 for (;;) {
	        // Toggle LED red
	        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000884:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000888:	4804      	ldr	r0, [pc, #16]	@ (800089c <StartTask01+0x1c>)
 800088a:	f000 ff42 	bl	8001712 <HAL_GPIO_TogglePin>
	        vTaskDelay(pdMS_TO_TICKS(1500)); // Delay for 500 milliseconds
 800088e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000892:	f002 f9f5 	bl	8002c80 <vTaskDelay>
	        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000896:	bf00      	nop
 8000898:	e7f4      	b.n	8000884 <StartTask01+0x4>
 800089a:	bf00      	nop
 800089c:	40020400 	.word	0x40020400

080008a0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
    for (;;) {
        // Glow the blue LED three times for 1500ms each
        for (int i = 0; i < 3; i++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	e014      	b.n	80008d6 <StartTask02+0x36>
        {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // Turn on LED
 80008ac:	2201      	movs	r2, #1
 80008ae:	2180      	movs	r1, #128	@ 0x80
 80008b0:	4817      	ldr	r0, [pc, #92]	@ (8000910 <StartTask02+0x70>)
 80008b2:	f000 ff15 	bl	80016e0 <HAL_GPIO_WritePin>
            vTaskDelay(pdMS_TO_TICKS(1500)); // Delay for 1500 milliseconds
 80008b6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80008ba:	f002 f9e1 	bl	8002c80 <vTaskDelay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // Turn off LED
 80008be:	2200      	movs	r2, #0
 80008c0:	2180      	movs	r1, #128	@ 0x80
 80008c2:	4813      	ldr	r0, [pc, #76]	@ (8000910 <StartTask02+0x70>)
 80008c4:	f000 ff0c 	bl	80016e0 <HAL_GPIO_WritePin>
            vTaskDelay(pdMS_TO_TICKS(1500)); // Delay for 1500 milliseconds
 80008c8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80008cc:	f002 f9d8 	bl	8002c80 <vTaskDelay>
        for (int i = 0; i < 3; i++)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3301      	adds	r3, #1
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b02      	cmp	r3, #2
 80008da:	dde7      	ble.n	80008ac <StartTask02+0xc>
        }

        // Glow the blue LED two times for 100ms each
        for (int i = 0; i < 2; i++)
 80008dc:	2300      	movs	r3, #0
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	e012      	b.n	8000908 <StartTask02+0x68>
        {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // Turn on LED
 80008e2:	2201      	movs	r2, #1
 80008e4:	2180      	movs	r1, #128	@ 0x80
 80008e6:	480a      	ldr	r0, [pc, #40]	@ (8000910 <StartTask02+0x70>)
 80008e8:	f000 fefa 	bl	80016e0 <HAL_GPIO_WritePin>
            vTaskDelay(pdMS_TO_TICKS(100)); // Delay for 100 milliseconds
 80008ec:	2064      	movs	r0, #100	@ 0x64
 80008ee:	f002 f9c7 	bl	8002c80 <vTaskDelay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // Turn off LED
 80008f2:	2200      	movs	r2, #0
 80008f4:	2180      	movs	r1, #128	@ 0x80
 80008f6:	4806      	ldr	r0, [pc, #24]	@ (8000910 <StartTask02+0x70>)
 80008f8:	f000 fef2 	bl	80016e0 <HAL_GPIO_WritePin>
            vTaskDelay(pdMS_TO_TICKS(100)); // Delay for 100 milliseconds
 80008fc:	2064      	movs	r0, #100	@ 0x64
 80008fe:	f002 f9bf 	bl	8002c80 <vTaskDelay>
        for (int i = 0; i < 2; i++)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	3301      	adds	r3, #1
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	dde9      	ble.n	80008e2 <StartTask02+0x42>
        for (int i = 0; i < 3; i++)
 800090e:	e7ca      	b.n	80008a6 <StartTask02+0x6>
 8000910:	40020400 	.word	0x40020400

08000914 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
	for (;;) {
		        // Toggle LED green
		        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000918:	2101      	movs	r1, #1
 800091a:	4804      	ldr	r0, [pc, #16]	@ (800092c <StartTask03+0x18>)
 800091c:	f000 fef9 	bl	8001712 <HAL_GPIO_TogglePin>
		        vTaskDelay(pdMS_TO_TICKS(100)); // Delay for 500 milliseconds
 8000920:	2064      	movs	r0, #100	@ 0x64
 8000922:	f002 f9ad 	bl	8002c80 <vTaskDelay>
		        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000926:	bf00      	nop
 8000928:	e7f6      	b.n	8000918 <StartTask03+0x4>
 800092a:	bf00      	nop
 800092c:	40020400 	.word	0x40020400

08000930 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
	for (;;) {
	        // Check if the push button is pressed
	        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8000934:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000938:	4807      	ldr	r0, [pc, #28]	@ (8000958 <StartTask04+0x28>)
 800093a:	f000 feb9 	bl	80016b0 <HAL_GPIO_ReadPin>
 800093e:	4603      	mov	r3, r0
 8000940:	2b01      	cmp	r3, #1
 8000942:	d1f7      	bne.n	8000934 <StartTask04+0x4>
	            // If the button is pressed, blink the LED faster
	        	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000944:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000948:	4804      	ldr	r0, [pc, #16]	@ (800095c <StartTask04+0x2c>)
 800094a:	f000 fee2 	bl	8001712 <HAL_GPIO_TogglePin>
	            vTaskDelay(pdMS_TO_TICKS(100)); // Delay for 100 milliseconds
 800094e:	2064      	movs	r0, #100	@ 0x64
 8000950:	f002 f996 	bl	8002c80 <vTaskDelay>
	        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8000954:	e7ee      	b.n	8000934 <StartTask04+0x4>
 8000956:	bf00      	nop
 8000958:	40020800 	.word	0x40020800
 800095c:	40020400 	.word	0x40020400

08000960 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000970:	d101      	bne.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000972:	f000 f95b 	bl	8000c2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000982:	b672      	cpsid	i
}
 8000984:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000986:	bf00      	nop
 8000988:	e7fd      	b.n	8000986 <Error_Handler+0x8>
	...

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	4a10      	ldr	r2, [pc, #64]	@ (80009d8 <HAL_MspInit+0x4c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099c:	6413      	str	r3, [r2, #64]	@ 0x40
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <HAL_MspInit+0x4c>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	210f      	movs	r1, #15
 80009c6:	f06f 0001 	mvn.w	r0, #1
 80009ca:	f000 fc9b 	bl	8001304 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800

080009dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a15      	ldr	r2, [pc, #84]	@ (8000a50 <HAL_ADC_MspInit+0x74>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d123      	bne.n	8000a46 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009fe:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <HAL_ADC_MspInit+0x78>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	4a14      	ldr	r2, [pc, #80]	@ (8000a54 <HAL_ADC_MspInit+0x78>)
 8000a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0a:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <HAL_ADC_MspInit+0x78>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <HAL_ADC_MspInit+0x78>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a54 <HAL_ADC_MspInit+0x78>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <HAL_ADC_MspInit+0x78>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a32:	2303      	movs	r3, #3
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <HAL_ADC_MspInit+0x7c>)
 8000a42:	f000 fc89 	bl	8001358 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a46:	bf00      	nop
 8000a48:	3728      	adds	r7, #40	@ 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40012000 	.word	0x40012000
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020000 	.word	0x40020000

08000a5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08e      	sub	sp, #56	@ 0x38
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000a6c:	4b34      	ldr	r3, [pc, #208]	@ (8000b40 <HAL_InitTick+0xe4>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a70:	4a33      	ldr	r2, [pc, #204]	@ (8000b40 <HAL_InitTick+0xe4>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a78:	4b31      	ldr	r3, [pc, #196]	@ (8000b40 <HAL_InitTick+0xe4>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a84:	f107 0210 	add.w	r2, r7, #16
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 fb1a 	bl	80020c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a94:	6a3b      	ldr	r3, [r7, #32]
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d103      	bne.n	8000aa6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a9e:	f001 faff 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8000aa2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000aa4:	e004      	b.n	8000ab0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000aa6:	f001 fafb 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ab2:	4a24      	ldr	r2, [pc, #144]	@ (8000b44 <HAL_InitTick+0xe8>)
 8000ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab8:	0c9b      	lsrs	r3, r3, #18
 8000aba:	3b01      	subs	r3, #1
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000abe:	4b22      	ldr	r3, [pc, #136]	@ (8000b48 <HAL_InitTick+0xec>)
 8000ac0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ac4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000ac6:	4b20      	ldr	r3, [pc, #128]	@ (8000b48 <HAL_InitTick+0xec>)
 8000ac8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000acc:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000ace:	4a1e      	ldr	r2, [pc, #120]	@ (8000b48 <HAL_InitTick+0xec>)
 8000ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ad2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <HAL_InitTick+0xec>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ada:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <HAL_InitTick+0xec>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae0:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <HAL_InitTick+0xec>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000ae6:	4818      	ldr	r0, [pc, #96]	@ (8000b48 <HAL_InitTick+0xec>)
 8000ae8:	f001 fb20 	bl	800212c <HAL_TIM_Base_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000af2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d11b      	bne.n	8000b32 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000afa:	4813      	ldr	r0, [pc, #76]	@ (8000b48 <HAL_InitTick+0xec>)
 8000afc:	f001 fb78 	bl	80021f0 <HAL_TIM_Base_Start_IT>
 8000b00:	4603      	mov	r3, r0
 8000b02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b06:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d111      	bne.n	8000b32 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b0e:	201c      	movs	r0, #28
 8000b10:	f000 fc14 	bl	800133c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b0f      	cmp	r3, #15
 8000b18:	d808      	bhi.n	8000b2c <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	6879      	ldr	r1, [r7, #4]
 8000b1e:	201c      	movs	r0, #28
 8000b20:	f000 fbf0 	bl	8001304 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b24:	4a09      	ldr	r2, [pc, #36]	@ (8000b4c <HAL_InitTick+0xf0>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6013      	str	r3, [r2, #0]
 8000b2a:	e002      	b.n	8000b32 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b32:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3738      	adds	r7, #56	@ 0x38
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	431bde83 	.word	0x431bde83
 8000b48:	20000374 	.word	0x20000374
 8000b4c:	20000004 	.word	0x20000004

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <NMI_Handler+0x4>

08000b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <MemManage_Handler+0x4>

08000b68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b8c:	4802      	ldr	r0, [pc, #8]	@ (8000b98 <TIM2_IRQHandler+0x10>)
 8000b8e:	f001 fba7 	bl	80022e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000374 	.word	0x20000374

08000b9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <SystemInit+0x20>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba6:	4a05      	ldr	r2, [pc, #20]	@ (8000bbc <SystemInit+0x20>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc4:	480d      	ldr	r0, [pc, #52]	@ (8000bfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bc6:	490e      	ldr	r1, [pc, #56]	@ (8000c00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8000c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0b      	ldr	r2, [pc, #44]	@ (8000c08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bdc:	4c0b      	ldr	r4, [pc, #44]	@ (8000c0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bea:	f7ff ffd7 	bl	8000b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bee:	f003 f83d 	bl	8003c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf2:	f7ff fcb7 	bl	8000564 <main>
  bx  lr    
 8000bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c04:	08003e54 	.word	0x08003e54
  ldr r2, =_sbss
 8000c08:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c0c:	20004250 	.word	0x20004250

08000c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC_IRQHandler>

08000c12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c16:	2003      	movs	r0, #3
 8000c18:	f000 fb69 	bl	80012ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1c:	200f      	movs	r0, #15
 8000c1e:	f7ff ff1d 	bl	8000a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c22:	f7ff feb3 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	@ (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	200003c0 	.word	0x200003c0

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	200003c0 	.word	0x200003c0

08000c6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d101      	bne.n	8000c82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e031      	b.n	8000ce6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d109      	bne.n	8000c9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff fea6 	bl	80009dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	f003 0310 	and.w	r3, r3, #16
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d116      	bne.n	8000cd8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <HAL_ADC_Init+0x84>)
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	f043 0202 	orr.w	r2, r3, #2
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f000 f970 	bl	8000fa0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	f023 0303 	bic.w	r3, r3, #3
 8000cce:	f043 0201 	orr.w	r2, r3, #1
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cd6:	e001      	b.n	8000cdc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	ffffeefd 	.word	0xffffeefd

08000cf4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d101      	bne.n	8000d10 <HAL_ADC_ConfigChannel+0x1c>
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	e136      	b.n	8000f7e <HAL_ADC_ConfigChannel+0x28a>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2201      	movs	r2, #1
 8000d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b09      	cmp	r3, #9
 8000d1e:	d93a      	bls.n	8000d96 <HAL_ADC_ConfigChannel+0xa2>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d28:	d035      	beq.n	8000d96 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	68d9      	ldr	r1, [r3, #12]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	4613      	mov	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	3b1e      	subs	r3, #30
 8000d40:	2207      	movs	r2, #7
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	400a      	ands	r2, r1
 8000d4e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a8d      	ldr	r2, [pc, #564]	@ (8000f8c <HAL_ADC_ConfigChannel+0x298>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d10a      	bne.n	8000d70 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	68d9      	ldr	r1, [r3, #12]
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	061a      	lsls	r2, r3, #24
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d6e:	e035      	b.n	8000ddc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68d9      	ldr	r1, [r3, #12]
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	4618      	mov	r0, r3
 8000d82:	4603      	mov	r3, r0
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4403      	add	r3, r0
 8000d88:	3b1e      	subs	r3, #30
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	430a      	orrs	r2, r1
 8000d92:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d94:	e022      	b.n	8000ddc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6919      	ldr	r1, [r3, #16]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	461a      	mov	r2, r3
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	2207      	movs	r2, #7
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43da      	mvns	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	400a      	ands	r2, r1
 8000db8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	6919      	ldr	r1, [r3, #16]
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	4603      	mov	r3, r0
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	4403      	add	r3, r0
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b06      	cmp	r3, #6
 8000de2:	d824      	bhi.n	8000e2e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	3b05      	subs	r3, #5
 8000df6:	221f      	movs	r2, #31
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43da      	mvns	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	400a      	ands	r2, r1
 8000e04:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	3b05      	subs	r3, #5
 8000e20:	fa00 f203 	lsl.w	r2, r0, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e2c:	e04c      	b.n	8000ec8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b0c      	cmp	r3, #12
 8000e34:	d824      	bhi.n	8000e80 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	3b23      	subs	r3, #35	@ 0x23
 8000e48:	221f      	movs	r2, #31
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	400a      	ands	r2, r1
 8000e56:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	4618      	mov	r0, r3
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	3b23      	subs	r3, #35	@ 0x23
 8000e72:	fa00 f203 	lsl.w	r2, r0, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e7e:	e023      	b.n	8000ec8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	3b41      	subs	r3, #65	@ 0x41
 8000e92:	221f      	movs	r2, #31
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43da      	mvns	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	400a      	ands	r2, r1
 8000ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	3b41      	subs	r3, #65	@ 0x41
 8000ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a30      	ldr	r2, [pc, #192]	@ (8000f90 <HAL_ADC_ConfigChannel+0x29c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d10a      	bne.n	8000ee8 <HAL_ADC_ConfigChannel+0x1f4>
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000eda:	d105      	bne.n	8000ee8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8000edc:	4b2d      	ldr	r3, [pc, #180]	@ (8000f94 <HAL_ADC_ConfigChannel+0x2a0>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	4a2c      	ldr	r2, [pc, #176]	@ (8000f94 <HAL_ADC_ConfigChannel+0x2a0>)
 8000ee2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000ee6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a28      	ldr	r2, [pc, #160]	@ (8000f90 <HAL_ADC_ConfigChannel+0x29c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d10f      	bne.n	8000f12 <HAL_ADC_ConfigChannel+0x21e>
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b12      	cmp	r3, #18
 8000ef8:	d10b      	bne.n	8000f12 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8000efa:	4b26      	ldr	r3, [pc, #152]	@ (8000f94 <HAL_ADC_ConfigChannel+0x2a0>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	4a25      	ldr	r2, [pc, #148]	@ (8000f94 <HAL_ADC_ConfigChannel+0x2a0>)
 8000f00:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000f04:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000f06:	4b23      	ldr	r3, [pc, #140]	@ (8000f94 <HAL_ADC_ConfigChannel+0x2a0>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	4a22      	ldr	r2, [pc, #136]	@ (8000f94 <HAL_ADC_ConfigChannel+0x2a0>)
 8000f0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f10:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a1e      	ldr	r2, [pc, #120]	@ (8000f90 <HAL_ADC_ConfigChannel+0x29c>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d12b      	bne.n	8000f74 <HAL_ADC_ConfigChannel+0x280>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a1a      	ldr	r2, [pc, #104]	@ (8000f8c <HAL_ADC_ConfigChannel+0x298>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d003      	beq.n	8000f2e <HAL_ADC_ConfigChannel+0x23a>
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b11      	cmp	r3, #17
 8000f2c:	d122      	bne.n	8000f74 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8000f2e:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <HAL_ADC_ConfigChannel+0x2a0>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	4a18      	ldr	r2, [pc, #96]	@ (8000f94 <HAL_ADC_ConfigChannel+0x2a0>)
 8000f34:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000f38:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <HAL_ADC_ConfigChannel+0x2a0>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	4a15      	ldr	r2, [pc, #84]	@ (8000f94 <HAL_ADC_ConfigChannel+0x2a0>)
 8000f40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f44:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a10      	ldr	r2, [pc, #64]	@ (8000f8c <HAL_ADC_ConfigChannel+0x298>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d111      	bne.n	8000f74 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000f50:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <HAL_ADC_ConfigChannel+0x2a4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a11      	ldr	r2, [pc, #68]	@ (8000f9c <HAL_ADC_ConfigChannel+0x2a8>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	0c9a      	lsrs	r2, r3, #18
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000f66:	e002      	b.n	8000f6e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1f9      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	10000012 	.word	0x10000012
 8000f90:	40012000 	.word	0x40012000
 8000f94:	40012300 	.word	0x40012300
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	431bde83 	.word	0x431bde83

08000fa0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000fa8:	4b78      	ldr	r3, [pc, #480]	@ (800118c <ADC_Init+0x1ec>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	4a77      	ldr	r2, [pc, #476]	@ (800118c <ADC_Init+0x1ec>)
 8000fae:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000fb2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000fb4:	4b75      	ldr	r3, [pc, #468]	@ (800118c <ADC_Init+0x1ec>)
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	4973      	ldr	r1, [pc, #460]	@ (800118c <ADC_Init+0x1ec>)
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6859      	ldr	r1, [r3, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	021a      	lsls	r2, r3, #8
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000ff4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6859      	ldr	r1, [r3, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	430a      	orrs	r2, r1
 8001006:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001016:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6899      	ldr	r1, [r3, #8]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68da      	ldr	r2, [r3, #12]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	430a      	orrs	r2, r1
 8001028:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800102e:	4a58      	ldr	r2, [pc, #352]	@ (8001190 <ADC_Init+0x1f0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d022      	beq.n	800107a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001042:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6899      	ldr	r1, [r3, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001064:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6899      	ldr	r1, [r3, #8]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	430a      	orrs	r2, r1
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	e00f      	b.n	800109a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001088:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001098:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0202 	bic.w	r2, r2, #2
 80010a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6899      	ldr	r1, [r3, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	005a      	lsls	r2, r3, #1
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	430a      	orrs	r2, r1
 80010bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d01b      	beq.n	8001100 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80010d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80010e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6859      	ldr	r1, [r3, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f2:	3b01      	subs	r3, #1
 80010f4:	035a      	lsls	r2, r3, #13
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	430a      	orrs	r2, r1
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	e007      	b.n	8001110 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800110e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800111e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	3b01      	subs	r3, #1
 800112c:	051a      	lsls	r2, r3, #20
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	430a      	orrs	r2, r1
 8001134:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001144:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6899      	ldr	r1, [r3, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001152:	025a      	lsls	r2, r3, #9
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800116a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6899      	ldr	r1, [r3, #8]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	029a      	lsls	r2, r3, #10
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	609a      	str	r2, [r3, #8]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	40012300 	.word	0x40012300
 8001190:	0f000001 	.word	0x0f000001

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x40>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x40>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00
 80011d8:	05fa0000 	.word	0x05fa0000

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4907      	ldr	r1, [pc, #28]	@ (8001230 <__NVIC_EnableIRQ+0x38>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	@ (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	@ (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	@ 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	@ 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ff4c 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001316:	f7ff ff61 	bl	80011dc <__NVIC_GetPriorityGrouping>
 800131a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	6978      	ldr	r0, [r7, #20]
 8001322:	f7ff ffb1 	bl	8001288 <NVIC_EncodePriority>
 8001326:	4602      	mov	r2, r0
 8001328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff80 	bl	8001234 <__NVIC_SetPriority>
}
 8001334:	bf00      	nop
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff54 	bl	80011f8 <__NVIC_EnableIRQ>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	@ 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e175      	b.n	8001664 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001378:	2201      	movs	r2, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	429a      	cmp	r2, r3
 8001392:	f040 8164 	bne.w	800165e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d005      	beq.n	80013ae <HAL_GPIO_Init+0x56>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d130      	bne.n	8001410 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e4:	2201      	movs	r2, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	f003 0201 	and.w	r2, r3, #1
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b03      	cmp	r3, #3
 800141a:	d017      	beq.n	800144c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d123      	bne.n	80014a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	08da      	lsrs	r2, r3, #3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3208      	adds	r2, #8
 8001460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3208      	adds	r2, #8
 800149a:	69b9      	ldr	r1, [r7, #24]
 800149c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0203 	and.w	r2, r3, #3
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80be 	beq.w	800165e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	4b66      	ldr	r3, [pc, #408]	@ (800167c <HAL_GPIO_Init+0x324>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	4a65      	ldr	r2, [pc, #404]	@ (800167c <HAL_GPIO_Init+0x324>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ee:	4b63      	ldr	r3, [pc, #396]	@ (800167c <HAL_GPIO_Init+0x324>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80014fa:	4a61      	ldr	r2, [pc, #388]	@ (8001680 <HAL_GPIO_Init+0x328>)
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	220f      	movs	r2, #15
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a58      	ldr	r2, [pc, #352]	@ (8001684 <HAL_GPIO_Init+0x32c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d037      	beq.n	8001596 <HAL_GPIO_Init+0x23e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a57      	ldr	r2, [pc, #348]	@ (8001688 <HAL_GPIO_Init+0x330>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d031      	beq.n	8001592 <HAL_GPIO_Init+0x23a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a56      	ldr	r2, [pc, #344]	@ (800168c <HAL_GPIO_Init+0x334>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d02b      	beq.n	800158e <HAL_GPIO_Init+0x236>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a55      	ldr	r2, [pc, #340]	@ (8001690 <HAL_GPIO_Init+0x338>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d025      	beq.n	800158a <HAL_GPIO_Init+0x232>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a54      	ldr	r2, [pc, #336]	@ (8001694 <HAL_GPIO_Init+0x33c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d01f      	beq.n	8001586 <HAL_GPIO_Init+0x22e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a53      	ldr	r2, [pc, #332]	@ (8001698 <HAL_GPIO_Init+0x340>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d019      	beq.n	8001582 <HAL_GPIO_Init+0x22a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a52      	ldr	r2, [pc, #328]	@ (800169c <HAL_GPIO_Init+0x344>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0x226>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a51      	ldr	r2, [pc, #324]	@ (80016a0 <HAL_GPIO_Init+0x348>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00d      	beq.n	800157a <HAL_GPIO_Init+0x222>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a50      	ldr	r2, [pc, #320]	@ (80016a4 <HAL_GPIO_Init+0x34c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_Init+0x21e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4f      	ldr	r2, [pc, #316]	@ (80016a8 <HAL_GPIO_Init+0x350>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_GPIO_Init+0x21a>
 800156e:	2309      	movs	r3, #9
 8001570:	e012      	b.n	8001598 <HAL_GPIO_Init+0x240>
 8001572:	230a      	movs	r3, #10
 8001574:	e010      	b.n	8001598 <HAL_GPIO_Init+0x240>
 8001576:	2308      	movs	r3, #8
 8001578:	e00e      	b.n	8001598 <HAL_GPIO_Init+0x240>
 800157a:	2307      	movs	r3, #7
 800157c:	e00c      	b.n	8001598 <HAL_GPIO_Init+0x240>
 800157e:	2306      	movs	r3, #6
 8001580:	e00a      	b.n	8001598 <HAL_GPIO_Init+0x240>
 8001582:	2305      	movs	r3, #5
 8001584:	e008      	b.n	8001598 <HAL_GPIO_Init+0x240>
 8001586:	2304      	movs	r3, #4
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x240>
 800158a:	2303      	movs	r3, #3
 800158c:	e004      	b.n	8001598 <HAL_GPIO_Init+0x240>
 800158e:	2302      	movs	r3, #2
 8001590:	e002      	b.n	8001598 <HAL_GPIO_Init+0x240>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_GPIO_Init+0x240>
 8001596:	2300      	movs	r3, #0
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	f002 0203 	and.w	r2, r2, #3
 800159e:	0092      	lsls	r2, r2, #2
 80015a0:	4093      	lsls	r3, r2
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015a8:	4935      	ldr	r1, [pc, #212]	@ (8001680 <HAL_GPIO_Init+0x328>)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b6:	4b3d      	ldr	r3, [pc, #244]	@ (80016ac <HAL_GPIO_Init+0x354>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015da:	4a34      	ldr	r2, [pc, #208]	@ (80016ac <HAL_GPIO_Init+0x354>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e0:	4b32      	ldr	r3, [pc, #200]	@ (80016ac <HAL_GPIO_Init+0x354>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001604:	4a29      	ldr	r2, [pc, #164]	@ (80016ac <HAL_GPIO_Init+0x354>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800160a:	4b28      	ldr	r3, [pc, #160]	@ (80016ac <HAL_GPIO_Init+0x354>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162e:	4a1f      	ldr	r2, [pc, #124]	@ (80016ac <HAL_GPIO_Init+0x354>)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001634:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <HAL_GPIO_Init+0x354>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001658:	4a14      	ldr	r2, [pc, #80]	@ (80016ac <HAL_GPIO_Init+0x354>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3301      	adds	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	2b0f      	cmp	r3, #15
 8001668:	f67f ae86 	bls.w	8001378 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3724      	adds	r7, #36	@ 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40013800 	.word	0x40013800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400
 800168c:	40020800 	.word	0x40020800
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40021000 	.word	0x40021000
 8001698:	40021400 	.word	0x40021400
 800169c:	40021800 	.word	0x40021800
 80016a0:	40021c00 	.word	0x40021c00
 80016a4:	40022000 	.word	0x40022000
 80016a8:	40022400 	.word	0x40022400
 80016ac:	40013c00 	.word	0x40013c00

080016b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691a      	ldr	r2, [r3, #16]
 80016c0:	887b      	ldrh	r3, [r7, #2]
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	e001      	b.n	80016d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
 80016ec:	4613      	mov	r3, r2
 80016ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f0:	787b      	ldrb	r3, [r7, #1]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f6:	887a      	ldrh	r2, [r7, #2]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80016fc:	e003      	b.n	8001706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80016fe:	887b      	ldrh	r3, [r7, #2]
 8001700:	041a      	lsls	r2, r3, #16
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	619a      	str	r2, [r3, #24]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001712:	b480      	push	{r7}
 8001714:	b085      	sub	sp, #20
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001724:	887a      	ldrh	r2, [r7, #2]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4013      	ands	r3, r2
 800172a:	041a      	lsls	r2, r3, #16
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	43d9      	mvns	r1, r3
 8001730:	887b      	ldrh	r3, [r7, #2]
 8001732:	400b      	ands	r3, r1
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	619a      	str	r2, [r3, #24]
}
 800173a:	bf00      	nop
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e29b      	b.n	8001c96 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8087 	beq.w	800187a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800176c:	4b96      	ldr	r3, [pc, #600]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b04      	cmp	r3, #4
 8001776:	d00c      	beq.n	8001792 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001778:	4b93      	ldr	r3, [pc, #588]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b08      	cmp	r3, #8
 8001782:	d112      	bne.n	80017aa <HAL_RCC_OscConfig+0x62>
 8001784:	4b90      	ldr	r3, [pc, #576]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001790:	d10b      	bne.n	80017aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001792:	4b8d      	ldr	r3, [pc, #564]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d06c      	beq.n	8001878 <HAL_RCC_OscConfig+0x130>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d168      	bne.n	8001878 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e275      	b.n	8001c96 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x7a>
 80017b4:	4b84      	ldr	r3, [pc, #528]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a83      	ldr	r2, [pc, #524]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 80017ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e02e      	b.n	8001820 <HAL_RCC_OscConfig+0xd8>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x9c>
 80017ca:	4b7f      	ldr	r3, [pc, #508]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a7e      	ldr	r2, [pc, #504]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 80017d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b7c      	ldr	r3, [pc, #496]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a7b      	ldr	r2, [pc, #492]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 80017dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e01d      	b.n	8001820 <HAL_RCC_OscConfig+0xd8>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0xc0>
 80017ee:	4b76      	ldr	r3, [pc, #472]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a75      	ldr	r2, [pc, #468]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 80017f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b73      	ldr	r3, [pc, #460]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a72      	ldr	r2, [pc, #456]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e00b      	b.n	8001820 <HAL_RCC_OscConfig+0xd8>
 8001808:	4b6f      	ldr	r3, [pc, #444]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a6e      	ldr	r2, [pc, #440]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 800180e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4b6c      	ldr	r3, [pc, #432]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a6b      	ldr	r2, [pc, #428]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 800181a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800181e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d013      	beq.n	8001850 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fa14 	bl	8000c54 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff fa10 	bl	8000c54 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	@ 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e229      	b.n	8001c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4b61      	ldr	r3, [pc, #388]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0xe8>
 800184e:	e014      	b.n	800187a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fa00 	bl	8000c54 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff f9fc 	bl	8000c54 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	@ 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e215      	b.n	8001c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186a:	4b57      	ldr	r3, [pc, #348]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x110>
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d069      	beq.n	800195a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001886:	4b50      	ldr	r3, [pc, #320]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00b      	beq.n	80018aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001892:	4b4d      	ldr	r3, [pc, #308]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	2b08      	cmp	r3, #8
 800189c:	d11c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x190>
 800189e:	4b4a      	ldr	r3, [pc, #296]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d116      	bne.n	80018d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	4b47      	ldr	r3, [pc, #284]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <HAL_RCC_OscConfig+0x17a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d001      	beq.n	80018c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e1e9      	b.n	8001c96 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c2:	4b41      	ldr	r3, [pc, #260]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	493d      	ldr	r1, [pc, #244]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d6:	e040      	b.n	800195a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d023      	beq.n	8001928 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e0:	4b39      	ldr	r3, [pc, #228]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a38      	ldr	r2, [pc, #224]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff f9b2 	bl	8000c54 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f4:	f7ff f9ae 	bl	8000c54 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e1c7      	b.n	8001c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001906:	4b30      	ldr	r3, [pc, #192]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001912:	4b2d      	ldr	r3, [pc, #180]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4929      	ldr	r1, [pc, #164]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]
 8001926:	e018      	b.n	800195a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001928:	4b27      	ldr	r3, [pc, #156]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a26      	ldr	r2, [pc, #152]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 800192e:	f023 0301 	bic.w	r3, r3, #1
 8001932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7ff f98e 	bl	8000c54 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193c:	f7ff f98a 	bl	8000c54 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e1a3      	b.n	8001c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194e:	4b1e      	ldr	r3, [pc, #120]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d038      	beq.n	80019d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d019      	beq.n	80019a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800196e:	4b16      	ldr	r3, [pc, #88]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 8001970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001972:	4a15      	ldr	r2, [pc, #84]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197a:	f7ff f96b 	bl	8000c54 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001982:	f7ff f967 	bl	8000c54 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e180      	b.n	8001c96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001994:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 8001996:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x23a>
 80019a0:	e01a      	b.n	80019d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 80019a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019a6:	4a08      	ldr	r2, [pc, #32]	@ (80019c8 <HAL_RCC_OscConfig+0x280>)
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ae:	f7ff f951 	bl	8000c54 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b4:	e00a      	b.n	80019cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b6:	f7ff f94d 	bl	8000c54 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d903      	bls.n	80019cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e166      	b.n	8001c96 <HAL_RCC_OscConfig+0x54e>
 80019c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019cc:	4b92      	ldr	r3, [pc, #584]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 80019ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1ee      	bne.n	80019b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 80a4 	beq.w	8001b2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e6:	4b8c      	ldr	r3, [pc, #560]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10d      	bne.n	8001a0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b89      	ldr	r3, [pc, #548]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	4a88      	ldr	r2, [pc, #544]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fe:	4b86      	ldr	r3, [pc, #536]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0e:	4b83      	ldr	r3, [pc, #524]	@ (8001c1c <HAL_RCC_OscConfig+0x4d4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d118      	bne.n	8001a4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a1a:	4b80      	ldr	r3, [pc, #512]	@ (8001c1c <HAL_RCC_OscConfig+0x4d4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a7f      	ldr	r2, [pc, #508]	@ (8001c1c <HAL_RCC_OscConfig+0x4d4>)
 8001a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a26:	f7ff f915 	bl	8000c54 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2e:	f7ff f911 	bl	8000c54 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b64      	cmp	r3, #100	@ 0x64
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e12a      	b.n	8001c96 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a40:	4b76      	ldr	r3, [pc, #472]	@ (8001c1c <HAL_RCC_OscConfig+0x4d4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d106      	bne.n	8001a62 <HAL_RCC_OscConfig+0x31a>
 8001a54:	4b70      	ldr	r3, [pc, #448]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a58:	4a6f      	ldr	r2, [pc, #444]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a60:	e02d      	b.n	8001abe <HAL_RCC_OscConfig+0x376>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x33c>
 8001a6a:	4b6b      	ldr	r3, [pc, #428]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6e:	4a6a      	ldr	r2, [pc, #424]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001a70:	f023 0301 	bic.w	r3, r3, #1
 8001a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a76:	4b68      	ldr	r3, [pc, #416]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7a:	4a67      	ldr	r2, [pc, #412]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001a7c:	f023 0304 	bic.w	r3, r3, #4
 8001a80:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a82:	e01c      	b.n	8001abe <HAL_RCC_OscConfig+0x376>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b05      	cmp	r3, #5
 8001a8a:	d10c      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x35e>
 8001a8c:	4b62      	ldr	r3, [pc, #392]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a90:	4a61      	ldr	r2, [pc, #388]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a98:	4b5f      	ldr	r3, [pc, #380]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a9c:	4a5e      	ldr	r2, [pc, #376]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aa4:	e00b      	b.n	8001abe <HAL_RCC_OscConfig+0x376>
 8001aa6:	4b5c      	ldr	r3, [pc, #368]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aaa:	4a5b      	ldr	r2, [pc, #364]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ab2:	4b59      	ldr	r3, [pc, #356]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab6:	4a58      	ldr	r2, [pc, #352]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001ab8:	f023 0304 	bic.w	r3, r3, #4
 8001abc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d015      	beq.n	8001af2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac6:	f7ff f8c5 	bl	8000c54 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001acc:	e00a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ace:	f7ff f8c1 	bl	8000c54 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e0d8      	b.n	8001c96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae4:	4b4c      	ldr	r3, [pc, #304]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0ee      	beq.n	8001ace <HAL_RCC_OscConfig+0x386>
 8001af0:	e014      	b.n	8001b1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af2:	f7ff f8af 	bl	8000c54 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af8:	e00a      	b.n	8001b10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afa:	f7ff f8ab 	bl	8000c54 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e0c2      	b.n	8001c96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b10:	4b41      	ldr	r3, [pc, #260]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1ee      	bne.n	8001afa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b1c:	7dfb      	ldrb	r3, [r7, #23]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d105      	bne.n	8001b2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b22:	4b3d      	ldr	r3, [pc, #244]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	4a3c      	ldr	r2, [pc, #240]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001b28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b2c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 80ae 	beq.w	8001c94 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b38:	4b37      	ldr	r3, [pc, #220]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d06d      	beq.n	8001c20 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d14b      	bne.n	8001be4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4c:	4b32      	ldr	r3, [pc, #200]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a31      	ldr	r2, [pc, #196]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff f87c 	bl	8000c54 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b60:	f7ff f878 	bl	8000c54 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e091      	b.n	8001c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b72:	4b29      	ldr	r3, [pc, #164]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69da      	ldr	r2, [r3, #28]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8c:	019b      	lsls	r3, r3, #6
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b94:	085b      	lsrs	r3, r3, #1
 8001b96:	3b01      	subs	r3, #1
 8001b98:	041b      	lsls	r3, r3, #16
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba0:	061b      	lsls	r3, r3, #24
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba8:	071b      	lsls	r3, r3, #28
 8001baa:	491b      	ldr	r1, [pc, #108]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb0:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a18      	ldr	r2, [pc, #96]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001bb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff f84a 	bl	8000c54 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc4:	f7ff f846 	bl	8000c54 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e05f      	b.n	8001c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x47c>
 8001be2:	e057      	b.n	8001c94 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0b      	ldr	r2, [pc, #44]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001bea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f830 	bl	8000c54 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7ff f82c 	bl	8000c54 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e045      	b.n	8001c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0a:	4b03      	ldr	r3, [pc, #12]	@ (8001c18 <HAL_RCC_OscConfig+0x4d0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4b0>
 8001c16:	e03d      	b.n	8001c94 <HAL_RCC_OscConfig+0x54c>
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca0 <HAL_RCC_OscConfig+0x558>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d030      	beq.n	8001c90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d129      	bne.n	8001c90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d122      	bne.n	8001c90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c50:	4013      	ands	r3, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d119      	bne.n	8001c90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c66:	085b      	lsrs	r3, r3, #1
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d10f      	bne.n	8001c90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d107      	bne.n	8001c90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800

08001ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0d0      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b6a      	ldr	r3, [pc, #424]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d910      	bls.n	8001cec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b67      	ldr	r3, [pc, #412]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 020f 	bic.w	r2, r3, #15
 8001cd2:	4965      	ldr	r1, [pc, #404]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b63      	ldr	r3, [pc, #396]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0b8      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d04:	4b59      	ldr	r3, [pc, #356]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	4a58      	ldr	r2, [pc, #352]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001d0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d1c:	4b53      	ldr	r3, [pc, #332]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4a52      	ldr	r2, [pc, #328]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001d22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d28:	4b50      	ldr	r3, [pc, #320]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	494d      	ldr	r1, [pc, #308]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d040      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b47      	ldr	r3, [pc, #284]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d115      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e07f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d66:	4b41      	ldr	r3, [pc, #260]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e073      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d76:	4b3d      	ldr	r3, [pc, #244]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e06b      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d86:	4b39      	ldr	r3, [pc, #228]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f023 0203 	bic.w	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4936      	ldr	r1, [pc, #216]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d98:	f7fe ff5c 	bl	8000c54 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da0:	f7fe ff58 	bl	8000c54 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e053      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 020c 	and.w	r2, r3, #12
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d1eb      	bne.n	8001da0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b27      	ldr	r3, [pc, #156]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 030f 	and.w	r3, r3, #15
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d210      	bcs.n	8001df8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 020f 	bic.w	r2, r3, #15
 8001dde:	4922      	ldr	r1, [pc, #136]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e032      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e04:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4916      	ldr	r1, [pc, #88]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e22:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	490e      	ldr	r1, [pc, #56]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e36:	f000 f821 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	490a      	ldr	r1, [pc, #40]	@ (8001e70 <HAL_RCC_ClockConfig+0x1cc>)
 8001e48:	5ccb      	ldrb	r3, [r1, r3]
 8001e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4e:	4a09      	ldr	r2, [pc, #36]	@ (8001e74 <HAL_RCC_ClockConfig+0x1d0>)
 8001e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e52:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <HAL_RCC_ClockConfig+0x1d4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fe00 	bl	8000a5c <HAL_InitTick>

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023c00 	.word	0x40023c00
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	08003e2c 	.word	0x08003e2c
 8001e74:	20000000 	.word	0x20000000
 8001e78:	20000004 	.word	0x20000004

08001e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e80:	b094      	sub	sp, #80	@ 0x50
 8001e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e88:	2300      	movs	r3, #0
 8001e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e94:	4b79      	ldr	r3, [pc, #484]	@ (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d00d      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x40>
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	f200 80e1 	bhi.w	8002068 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d003      	beq.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001eae:	e0db      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eb0:	4b73      	ldr	r3, [pc, #460]	@ (8002080 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001eb4:	e0db      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eb6:	4b73      	ldr	r3, [pc, #460]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x208>)
 8001eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001eba:	e0d8      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ebc:	4b6f      	ldr	r3, [pc, #444]	@ (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ec4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ec6:	4b6d      	ldr	r3, [pc, #436]	@ (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d063      	beq.n	8001f9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed2:	4b6a      	ldr	r3, [pc, #424]	@ (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	099b      	lsrs	r3, r3, #6
 8001ed8:	2200      	movs	r2, #0
 8001eda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001edc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001eea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001eee:	4622      	mov	r2, r4
 8001ef0:	462b      	mov	r3, r5
 8001ef2:	f04f 0000 	mov.w	r0, #0
 8001ef6:	f04f 0100 	mov.w	r1, #0
 8001efa:	0159      	lsls	r1, r3, #5
 8001efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f00:	0150      	lsls	r0, r2, #5
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4621      	mov	r1, r4
 8001f08:	1a51      	subs	r1, r2, r1
 8001f0a:	6139      	str	r1, [r7, #16]
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f20:	4659      	mov	r1, fp
 8001f22:	018b      	lsls	r3, r1, #6
 8001f24:	4651      	mov	r1, sl
 8001f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f2a:	4651      	mov	r1, sl
 8001f2c:	018a      	lsls	r2, r1, #6
 8001f2e:	4651      	mov	r1, sl
 8001f30:	ebb2 0801 	subs.w	r8, r2, r1
 8001f34:	4659      	mov	r1, fp
 8001f36:	eb63 0901 	sbc.w	r9, r3, r1
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f4e:	4690      	mov	r8, r2
 8001f50:	4699      	mov	r9, r3
 8001f52:	4623      	mov	r3, r4
 8001f54:	eb18 0303 	adds.w	r3, r8, r3
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	462b      	mov	r3, r5
 8001f5c:	eb49 0303 	adc.w	r3, r9, r3
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f6e:	4629      	mov	r1, r5
 8001f70:	024b      	lsls	r3, r1, #9
 8001f72:	4621      	mov	r1, r4
 8001f74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f78:	4621      	mov	r1, r4
 8001f7a:	024a      	lsls	r2, r1, #9
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f82:	2200      	movs	r2, #0
 8001f84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f8c:	f7fe f958 	bl	8000240 <__aeabi_uldivmod>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4613      	mov	r3, r2
 8001f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f98:	e058      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f9a:	4b38      	ldr	r3, [pc, #224]	@ (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	099b      	lsrs	r3, r3, #6
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001faa:	623b      	str	r3, [r7, #32]
 8001fac:	2300      	movs	r3, #0
 8001fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fb4:	4642      	mov	r2, r8
 8001fb6:	464b      	mov	r3, r9
 8001fb8:	f04f 0000 	mov.w	r0, #0
 8001fbc:	f04f 0100 	mov.w	r1, #0
 8001fc0:	0159      	lsls	r1, r3, #5
 8001fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fc6:	0150      	lsls	r0, r2, #5
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4641      	mov	r1, r8
 8001fce:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fd2:	4649      	mov	r1, r9
 8001fd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001fe4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fe8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001fec:	ebb2 040a 	subs.w	r4, r2, sl
 8001ff0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	00eb      	lsls	r3, r5, #3
 8001ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002002:	00e2      	lsls	r2, r4, #3
 8002004:	4614      	mov	r4, r2
 8002006:	461d      	mov	r5, r3
 8002008:	4643      	mov	r3, r8
 800200a:	18e3      	adds	r3, r4, r3
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	464b      	mov	r3, r9
 8002010:	eb45 0303 	adc.w	r3, r5, r3
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002022:	4629      	mov	r1, r5
 8002024:	028b      	lsls	r3, r1, #10
 8002026:	4621      	mov	r1, r4
 8002028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800202c:	4621      	mov	r1, r4
 800202e:	028a      	lsls	r2, r1, #10
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002036:	2200      	movs	r2, #0
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	61fa      	str	r2, [r7, #28]
 800203c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002040:	f7fe f8fe 	bl	8000240 <__aeabi_uldivmod>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4613      	mov	r3, r2
 800204a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	3301      	adds	r3, #1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800205c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800205e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002066:	e002      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <HAL_RCC_GetSysClockFreq+0x204>)
 800206a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800206c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800206e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002070:	4618      	mov	r0, r3
 8002072:	3750      	adds	r7, #80	@ 0x50
 8002074:	46bd      	mov	sp, r7
 8002076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
 8002080:	00f42400 	.word	0x00f42400
 8002084:	007a1200 	.word	0x007a1200

08002088 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800208c:	4b03      	ldr	r3, [pc, #12]	@ (800209c <HAL_RCC_GetHCLKFreq+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000000 	.word	0x20000000

080020a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020a4:	f7ff fff0 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	0a9b      	lsrs	r3, r3, #10
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	4903      	ldr	r1, [pc, #12]	@ (80020c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020b6:	5ccb      	ldrb	r3, [r1, r3]
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40023800 	.word	0x40023800
 80020c4:	08003e3c 	.word	0x08003e3c

080020c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	220f      	movs	r2, #15
 80020d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020d8:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <HAL_RCC_GetClockConfig+0x5c>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0203 	and.w	r2, r3, #3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002124 <HAL_RCC_GetClockConfig+0x5c>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002124 <HAL_RCC_GetClockConfig+0x5c>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80020fc:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <HAL_RCC_GetClockConfig+0x5c>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	08db      	lsrs	r3, r3, #3
 8002102:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800210a:	4b07      	ldr	r3, [pc, #28]	@ (8002128 <HAL_RCC_GetClockConfig+0x60>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 020f 	and.w	r2, r3, #15
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	601a      	str	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	40023c00 	.word	0x40023c00

0800212c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e049      	b.n	80021d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f841 	bl	80021da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3304      	adds	r3, #4
 8002168:	4619      	mov	r1, r3
 800216a:	4610      	mov	r0, r2
 800216c:	f000 f9e8 	bl	8002540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b01      	cmp	r3, #1
 8002202:	d001      	beq.n	8002208 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e054      	b.n	80022b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a26      	ldr	r2, [pc, #152]	@ (80022c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d022      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x80>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002232:	d01d      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x80>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a22      	ldr	r2, [pc, #136]	@ (80022c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d018      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x80>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a21      	ldr	r2, [pc, #132]	@ (80022c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d013      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x80>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1f      	ldr	r2, [pc, #124]	@ (80022cc <HAL_TIM_Base_Start_IT+0xdc>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00e      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x80>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1e      	ldr	r2, [pc, #120]	@ (80022d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d009      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x80>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a1c      	ldr	r2, [pc, #112]	@ (80022d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d004      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x80>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a1b      	ldr	r2, [pc, #108]	@ (80022d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d115      	bne.n	800229c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	4b19      	ldr	r3, [pc, #100]	@ (80022dc <HAL_TIM_Base_Start_IT+0xec>)
 8002278:	4013      	ands	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b06      	cmp	r3, #6
 8002280:	d015      	beq.n	80022ae <HAL_TIM_Base_Start_IT+0xbe>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002288:	d011      	beq.n	80022ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800229a:	e008      	b.n	80022ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	e000      	b.n	80022b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40010000 	.word	0x40010000
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40000800 	.word	0x40000800
 80022cc:	40000c00 	.word	0x40000c00
 80022d0:	40010400 	.word	0x40010400
 80022d4:	40014000 	.word	0x40014000
 80022d8:	40001800 	.word	0x40001800
 80022dc:	00010007 	.word	0x00010007

080022e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d020      	beq.n	8002344 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01b      	beq.n	8002344 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0202 	mvn.w	r2, #2
 8002314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f8e9 	bl	8002502 <HAL_TIM_IC_CaptureCallback>
 8002330:	e005      	b.n	800233e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f8db 	bl	80024ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f8ec 	bl	8002516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	d020      	beq.n	8002390 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d01b      	beq.n	8002390 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f06f 0204 	mvn.w	r2, #4
 8002360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2202      	movs	r2, #2
 8002366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f8c3 	bl	8002502 <HAL_TIM_IC_CaptureCallback>
 800237c:	e005      	b.n	800238a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f8b5 	bl	80024ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f8c6 	bl	8002516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d020      	beq.n	80023dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01b      	beq.n	80023dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0208 	mvn.w	r2, #8
 80023ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2204      	movs	r2, #4
 80023b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f89d 	bl	8002502 <HAL_TIM_IC_CaptureCallback>
 80023c8:	e005      	b.n	80023d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f88f 	bl	80024ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f8a0 	bl	8002516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d020      	beq.n	8002428 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d01b      	beq.n	8002428 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0210 	mvn.w	r2, #16
 80023f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2208      	movs	r2, #8
 80023fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f877 	bl	8002502 <HAL_TIM_IC_CaptureCallback>
 8002414:	e005      	b.n	8002422 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f869 	bl	80024ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f87a 	bl	8002516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00c      	beq.n	800244c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d007      	beq.n	800244c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0201 	mvn.w	r2, #1
 8002444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7fe fa8a 	bl	8000960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002452:	2b00      	cmp	r3, #0
 8002454:	d104      	bne.n	8002460 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00c      	beq.n	800247a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f919 	bl	80026ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00c      	beq.n	800249e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f911 	bl	80026c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00c      	beq.n	80024c2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f834 	bl	800252a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00c      	beq.n	80024e6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f06f 0220 	mvn.w	r2, #32
 80024de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f8d9 	bl	8002698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a46      	ldr	r2, [pc, #280]	@ (800266c <TIM_Base_SetConfig+0x12c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d013      	beq.n	8002580 <TIM_Base_SetConfig+0x40>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800255e:	d00f      	beq.n	8002580 <TIM_Base_SetConfig+0x40>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a43      	ldr	r2, [pc, #268]	@ (8002670 <TIM_Base_SetConfig+0x130>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d00b      	beq.n	8002580 <TIM_Base_SetConfig+0x40>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a42      	ldr	r2, [pc, #264]	@ (8002674 <TIM_Base_SetConfig+0x134>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d007      	beq.n	8002580 <TIM_Base_SetConfig+0x40>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a41      	ldr	r2, [pc, #260]	@ (8002678 <TIM_Base_SetConfig+0x138>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d003      	beq.n	8002580 <TIM_Base_SetConfig+0x40>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a40      	ldr	r2, [pc, #256]	@ (800267c <TIM_Base_SetConfig+0x13c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d108      	bne.n	8002592 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a35      	ldr	r2, [pc, #212]	@ (800266c <TIM_Base_SetConfig+0x12c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d02b      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a0:	d027      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a32      	ldr	r2, [pc, #200]	@ (8002670 <TIM_Base_SetConfig+0x130>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d023      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a31      	ldr	r2, [pc, #196]	@ (8002674 <TIM_Base_SetConfig+0x134>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01f      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a30      	ldr	r2, [pc, #192]	@ (8002678 <TIM_Base_SetConfig+0x138>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d01b      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a2f      	ldr	r2, [pc, #188]	@ (800267c <TIM_Base_SetConfig+0x13c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d017      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a2e      	ldr	r2, [pc, #184]	@ (8002680 <TIM_Base_SetConfig+0x140>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002684 <TIM_Base_SetConfig+0x144>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00f      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002688 <TIM_Base_SetConfig+0x148>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00b      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a2b      	ldr	r2, [pc, #172]	@ (800268c <TIM_Base_SetConfig+0x14c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002690 <TIM_Base_SetConfig+0x150>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d003      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a29      	ldr	r2, [pc, #164]	@ (8002694 <TIM_Base_SetConfig+0x154>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d108      	bne.n	8002604 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a10      	ldr	r2, [pc, #64]	@ (800266c <TIM_Base_SetConfig+0x12c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d003      	beq.n	8002638 <TIM_Base_SetConfig+0xf8>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a12      	ldr	r2, [pc, #72]	@ (800267c <TIM_Base_SetConfig+0x13c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d103      	bne.n	8002640 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b01      	cmp	r3, #1
 8002650:	d105      	bne.n	800265e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f023 0201 	bic.w	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	611a      	str	r2, [r3, #16]
  }
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40010000 	.word	0x40010000
 8002670:	40000400 	.word	0x40000400
 8002674:	40000800 	.word	0x40000800
 8002678:	40000c00 	.word	0x40000c00
 800267c:	40010400 	.word	0x40010400
 8002680:	40014000 	.word	0x40014000
 8002684:	40014400 	.word	0x40014400
 8002688:	40014800 	.word	0x40014800
 800268c:	40001800 	.word	0x40001800
 8002690:	40001c00 	.word	0x40001c00
 8002694:	40002000 	.word	0x40002000

08002698 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80026e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026e6:	2b84      	cmp	r3, #132	@ 0x84
 80026e8:	d005      	beq.n	80026f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80026ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4413      	add	r3, r2
 80026f2:	3303      	adds	r3, #3
 80026f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80026f6:	68fb      	ldr	r3, [r7, #12]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002708:	f000 faf2 	bl	8002cf0 <vTaskStartScheduler>
  
  return osOK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	bd80      	pop	{r7, pc}

08002712 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002712:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002714:	b089      	sub	sp, #36	@ 0x24
 8002716:	af04      	add	r7, sp, #16
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <osThreadCreate+0x54>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01c      	beq.n	8002766 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685c      	ldr	r4, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691e      	ldr	r6, [r3, #16]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff ffc8 	bl	80026d4 <makeFreeRtosPriority>
 8002744:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800274e:	9202      	str	r2, [sp, #8]
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	9100      	str	r1, [sp, #0]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	4632      	mov	r2, r6
 8002758:	4629      	mov	r1, r5
 800275a:	4620      	mov	r0, r4
 800275c:	f000 f8d9 	bl	8002912 <xTaskCreateStatic>
 8002760:	4603      	mov	r3, r0
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	e01c      	b.n	80027a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685c      	ldr	r4, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002772:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ffaa 	bl	80026d4 <makeFreeRtosPriority>
 8002780:	4602      	mov	r2, r0
 8002782:	f107 030c 	add.w	r3, r7, #12
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	9200      	str	r2, [sp, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	4632      	mov	r2, r6
 800278e:	4629      	mov	r1, r5
 8002790:	4620      	mov	r0, r4
 8002792:	f000 f924 	bl	80029de <xTaskCreate>
 8002796:	4603      	mov	r3, r0
 8002798:	2b01      	cmp	r3, #1
 800279a:	d001      	beq.n	80027a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800279c:	2300      	movs	r3, #0
 800279e:	e000      	b.n	80027a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80027a0:	68fb      	ldr	r3, [r7, #12]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f103 0208 	add.w	r2, r3, #8
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f04f 32ff 	mov.w	r2, #4294967295
 80027c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f103 0208 	add.w	r2, r3, #8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f103 0208 	add.w	r2, r3, #8
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	601a      	str	r2, [r3, #0]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002862:	d103      	bne.n	800286c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	e00c      	b.n	8002886 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3308      	adds	r3, #8
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	e002      	b.n	800287a <vListInsert+0x2e>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	429a      	cmp	r2, r3
 8002884:	d2f6      	bcs.n	8002874 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	601a      	str	r2, [r3, #0]
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6892      	ldr	r2, [r2, #8]
 80028d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6852      	ldr	r2, [r2, #4]
 80028de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d103      	bne.n	80028f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002912:	b580      	push	{r7, lr}
 8002914:	b08e      	sub	sp, #56	@ 0x38
 8002916:	af04      	add	r7, sp, #16
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10d      	bne.n	8002942 <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800292a:	b672      	cpsid	i
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	b662      	cpsie	i
 800293a:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	e7fd      	b.n	800293e <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8002942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10d      	bne.n	8002964 <xTaskCreateStatic+0x52>
	__asm volatile
 8002948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800294c:	b672      	cpsid	i
 800294e:	f383 8811 	msr	BASEPRI, r3
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	b662      	cpsie	i
 800295c:	61fb      	str	r3, [r7, #28]
}
 800295e:	bf00      	nop
 8002960:	bf00      	nop
 8002962:	e7fd      	b.n	8002960 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002964:	23a0      	movs	r3, #160	@ 0xa0
 8002966:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2ba0      	cmp	r3, #160	@ 0xa0
 800296c:	d00d      	beq.n	800298a <xTaskCreateStatic+0x78>
	__asm volatile
 800296e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002972:	b672      	cpsid	i
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	b662      	cpsie	i
 8002982:	61bb      	str	r3, [r7, #24]
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	e7fd      	b.n	8002986 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800298a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800298c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01e      	beq.n	80029d0 <xTaskCreateStatic+0xbe>
 8002992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01b      	beq.n	80029d0 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800299a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029a0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	2202      	movs	r2, #2
 80029a6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80029aa:	2300      	movs	r3, #0
 80029ac:	9303      	str	r3, [sp, #12]
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	9302      	str	r3, [sp, #8]
 80029b2:	f107 0314 	add.w	r3, r7, #20
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f850 	bl	8002a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029ca:	f000 f8ef 	bl	8002bac <prvAddNewTaskToReadyList>
 80029ce:	e001      	b.n	80029d4 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80029d4:	697b      	ldr	r3, [r7, #20]
	}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3728      	adds	r7, #40	@ 0x28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b08c      	sub	sp, #48	@ 0x30
 80029e2:	af04      	add	r7, sp, #16
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	4613      	mov	r3, r2
 80029ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fef2 	bl	80037dc <pvPortMalloc>
 80029f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00e      	beq.n	8002a1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a00:	20a0      	movs	r0, #160	@ 0xa0
 8002a02:	f000 feeb 	bl	80037dc <pvPortMalloc>
 8002a06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a14:	e005      	b.n	8002a22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a16:	6978      	ldr	r0, [r7, #20]
 8002a18:	f000 ffae 	bl	8003978 <vPortFree>
 8002a1c:	e001      	b.n	8002a22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d017      	beq.n	8002a58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a30:	88fa      	ldrh	r2, [r7, #6]
 8002a32:	2300      	movs	r3, #0
 8002a34:	9303      	str	r3, [sp, #12]
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	9302      	str	r3, [sp, #8]
 8002a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f80e 	bl	8002a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a4c:	69f8      	ldr	r0, [r7, #28]
 8002a4e:	f000 f8ad 	bl	8002bac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	e002      	b.n	8002a5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a58:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a5e:	69bb      	ldr	r3, [r7, #24]
	}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3720      	adds	r7, #32
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002a80:	440b      	add	r3, r1
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	f023 0307 	bic.w	r3, r3, #7
 8002a8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00d      	beq.n	8002ab6 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8002a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a9e:	b672      	cpsid	i
 8002aa0:	f383 8811 	msr	BASEPRI, r3
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	b662      	cpsie	i
 8002aae:	617b      	str	r3, [r7, #20]
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	e7fd      	b.n	8002ab2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01f      	beq.n	8002afc <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002abc:	2300      	movs	r3, #0
 8002abe:	61fb      	str	r3, [r7, #28]
 8002ac0:	e012      	b.n	8002ae8 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	7819      	ldrb	r1, [r3, #0]
 8002aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	4413      	add	r3, r2
 8002ad0:	3334      	adds	r3, #52	@ 0x34
 8002ad2:	460a      	mov	r2, r1
 8002ad4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	4413      	add	r3, r2
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d006      	beq.n	8002af0 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	61fb      	str	r3, [r7, #28]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	d9e9      	bls.n	8002ac2 <prvInitialiseNewTask+0x5a>
 8002aee:	e000      	b.n	8002af2 <prvInitialiseNewTask+0x8a>
			{
				break;
 8002af0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002afa:	e003      	b.n	8002b04 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b06:	2b06      	cmp	r3, #6
 8002b08:	d901      	bls.n	8002b0e <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b0a:	2306      	movs	r3, #6
 8002b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b12:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b18:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b22:	3304      	adds	r3, #4
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fe60 	bl	80027ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2c:	3318      	adds	r3, #24
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fe5b 	bl	80027ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3c:	f1c3 0207 	rsb	r2, r3, #7
 8002b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b48:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5c:	334c      	adds	r3, #76	@ 0x4c
 8002b5e:	224c      	movs	r2, #76	@ 0x4c
 8002b60:	2100      	movs	r1, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f001 f824 	bl	8003bb0 <memset>
 8002b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6a:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba0 <prvInitialiseNewTask+0x138>)
 8002b6c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b70:	4a0c      	ldr	r2, [pc, #48]	@ (8002ba4 <prvInitialiseNewTask+0x13c>)
 8002b72:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b76:	4a0c      	ldr	r2, [pc, #48]	@ (8002ba8 <prvInitialiseNewTask+0x140>)
 8002b78:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	68f9      	ldr	r1, [r7, #12]
 8002b7e:	69b8      	ldr	r0, [r7, #24]
 8002b80:	f000 fc38 	bl	80033f4 <pxPortInitialiseStack>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b96:	bf00      	nop
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20004110 	.word	0x20004110
 8002ba4:	20004178 	.word	0x20004178
 8002ba8:	200041e0 	.word	0x200041e0

08002bac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002bb4:	f000 fd2a 	bl	800360c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8002c64 <prvAddNewTaskToReadyList+0xb8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	4a29      	ldr	r2, [pc, #164]	@ (8002c64 <prvAddNewTaskToReadyList+0xb8>)
 8002bc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002bc2:	4b29      	ldr	r3, [pc, #164]	@ (8002c68 <prvAddNewTaskToReadyList+0xbc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002bca:	4a27      	ldr	r2, [pc, #156]	@ (8002c68 <prvAddNewTaskToReadyList+0xbc>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bd0:	4b24      	ldr	r3, [pc, #144]	@ (8002c64 <prvAddNewTaskToReadyList+0xb8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d110      	bne.n	8002bfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002bd8:	f000 fae0 	bl	800319c <prvInitialiseTaskLists>
 8002bdc:	e00d      	b.n	8002bfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002bde:	4b23      	ldr	r3, [pc, #140]	@ (8002c6c <prvAddNewTaskToReadyList+0xc0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002be6:	4b20      	ldr	r3, [pc, #128]	@ (8002c68 <prvAddNewTaskToReadyList+0xbc>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d802      	bhi.n	8002bfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c68 <prvAddNewTaskToReadyList+0xbc>)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8002c70 <prvAddNewTaskToReadyList+0xc4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	4a1b      	ldr	r2, [pc, #108]	@ (8002c70 <prvAddNewTaskToReadyList+0xc4>)
 8002c02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	2201      	movs	r2, #1
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	4b19      	ldr	r3, [pc, #100]	@ (8002c74 <prvAddNewTaskToReadyList+0xc8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	4a18      	ldr	r2, [pc, #96]	@ (8002c74 <prvAddNewTaskToReadyList+0xc8>)
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4a15      	ldr	r2, [pc, #84]	@ (8002c78 <prvAddNewTaskToReadyList+0xcc>)
 8002c24:	441a      	add	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	f7ff fde9 	bl	8002804 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c32:	f000 fd21 	bl	8003678 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c36:	4b0d      	ldr	r3, [pc, #52]	@ (8002c6c <prvAddNewTaskToReadyList+0xc0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00e      	beq.n	8002c5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <prvAddNewTaskToReadyList+0xbc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d207      	bcs.n	8002c5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c7c <prvAddNewTaskToReadyList+0xd0>)
 8002c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	200004c4 	.word	0x200004c4
 8002c68:	200003c4 	.word	0x200003c4
 8002c6c:	200004d0 	.word	0x200004d0
 8002c70:	200004e0 	.word	0x200004e0
 8002c74:	200004cc 	.word	0x200004cc
 8002c78:	200003c8 	.word	0x200003c8
 8002c7c:	e000ed04 	.word	0xe000ed04

08002c80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01a      	beq.n	8002cc8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c92:	4b15      	ldr	r3, [pc, #84]	@ (8002ce8 <vTaskDelay+0x68>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00d      	beq.n	8002cb6 <vTaskDelay+0x36>
	__asm volatile
 8002c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c9e:	b672      	cpsid	i
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	b662      	cpsie	i
 8002cae:	60bb      	str	r3, [r7, #8]
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	e7fd      	b.n	8002cb2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8002cb6:	f000 f889 	bl	8002dcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002cba:	2100      	movs	r1, #0
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 fb33 	bl	8003328 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002cc2:	f000 f891 	bl	8002de8 <xTaskResumeAll>
 8002cc6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d107      	bne.n	8002cde <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8002cce:	4b07      	ldr	r3, [pc, #28]	@ (8002cec <vTaskDelay+0x6c>)
 8002cd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200004ec 	.word	0x200004ec
 8002cec:	e000ed04 	.word	0xe000ed04

08002cf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	@ 0x28
 8002cf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002cfe:	463a      	mov	r2, r7
 8002d00:	1d39      	adds	r1, r7, #4
 8002d02:	f107 0308 	add.w	r3, r7, #8
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd fc12 	bl	8000530 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d0c:	6839      	ldr	r1, [r7, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	9202      	str	r2, [sp, #8]
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	2300      	movs	r3, #0
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	460a      	mov	r2, r1
 8002d1e:	4923      	ldr	r1, [pc, #140]	@ (8002dac <vTaskStartScheduler+0xbc>)
 8002d20:	4823      	ldr	r0, [pc, #140]	@ (8002db0 <vTaskStartScheduler+0xc0>)
 8002d22:	f7ff fdf6 	bl	8002912 <xTaskCreateStatic>
 8002d26:	4603      	mov	r3, r0
 8002d28:	4a22      	ldr	r2, [pc, #136]	@ (8002db4 <vTaskStartScheduler+0xc4>)
 8002d2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d2c:	4b21      	ldr	r3, [pc, #132]	@ (8002db4 <vTaskStartScheduler+0xc4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d34:	2301      	movs	r3, #1
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	e001      	b.n	8002d3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d11d      	bne.n	8002d80 <vTaskStartScheduler+0x90>
	__asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d48:	b672      	cpsid	i
 8002d4a:	f383 8811 	msr	BASEPRI, r3
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	b662      	cpsie	i
 8002d58:	613b      	str	r3, [r7, #16]
}
 8002d5a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002d5c:	4b16      	ldr	r3, [pc, #88]	@ (8002db8 <vTaskStartScheduler+0xc8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	334c      	adds	r3, #76	@ 0x4c
 8002d62:	4a16      	ldr	r2, [pc, #88]	@ (8002dbc <vTaskStartScheduler+0xcc>)
 8002d64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d66:	4b16      	ldr	r3, [pc, #88]	@ (8002dc0 <vTaskStartScheduler+0xd0>)
 8002d68:	f04f 32ff 	mov.w	r2, #4294967295
 8002d6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d6e:	4b15      	ldr	r3, [pc, #84]	@ (8002dc4 <vTaskStartScheduler+0xd4>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d74:	4b14      	ldr	r3, [pc, #80]	@ (8002dc8 <vTaskStartScheduler+0xd8>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d7a:	f000 fbc9 	bl	8003510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d7e:	e011      	b.n	8002da4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d86:	d10d      	bne.n	8002da4 <vTaskStartScheduler+0xb4>
	__asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d8c:	b672      	cpsid	i
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	b662      	cpsie	i
 8002d9c:	60fb      	str	r3, [r7, #12]
}
 8002d9e:	bf00      	nop
 8002da0:	bf00      	nop
 8002da2:	e7fd      	b.n	8002da0 <vTaskStartScheduler+0xb0>
}
 8002da4:	bf00      	nop
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	08003e24 	.word	0x08003e24
 8002db0:	0800316d 	.word	0x0800316d
 8002db4:	200004e8 	.word	0x200004e8
 8002db8:	200003c4 	.word	0x200003c4
 8002dbc:	20000010 	.word	0x20000010
 8002dc0:	200004e4 	.word	0x200004e4
 8002dc4:	200004d0 	.word	0x200004d0
 8002dc8:	200004c8 	.word	0x200004c8

08002dcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002dd0:	4b04      	ldr	r3, [pc, #16]	@ (8002de4 <vTaskSuspendAll+0x18>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	4a03      	ldr	r2, [pc, #12]	@ (8002de4 <vTaskSuspendAll+0x18>)
 8002dd8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	200004ec 	.word	0x200004ec

08002de8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002df6:	4b43      	ldr	r3, [pc, #268]	@ (8002f04 <xTaskResumeAll+0x11c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10d      	bne.n	8002e1a <xTaskResumeAll+0x32>
	__asm volatile
 8002dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e02:	b672      	cpsid	i
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	b662      	cpsie	i
 8002e12:	603b      	str	r3, [r7, #0]
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	e7fd      	b.n	8002e16 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e1a:	f000 fbf7 	bl	800360c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e1e:	4b39      	ldr	r3, [pc, #228]	@ (8002f04 <xTaskResumeAll+0x11c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	4a37      	ldr	r2, [pc, #220]	@ (8002f04 <xTaskResumeAll+0x11c>)
 8002e26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e28:	4b36      	ldr	r3, [pc, #216]	@ (8002f04 <xTaskResumeAll+0x11c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d161      	bne.n	8002ef4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e30:	4b35      	ldr	r3, [pc, #212]	@ (8002f08 <xTaskResumeAll+0x120>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d05d      	beq.n	8002ef4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e38:	e02e      	b.n	8002e98 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e3a:	4b34      	ldr	r3, [pc, #208]	@ (8002f0c <xTaskResumeAll+0x124>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3318      	adds	r3, #24
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fd39 	bl	80028be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fd34 	bl	80028be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f10 <xTaskResumeAll+0x128>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	4a2a      	ldr	r2, [pc, #168]	@ (8002f10 <xTaskResumeAll+0x128>)
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4a27      	ldr	r2, [pc, #156]	@ (8002f14 <xTaskResumeAll+0x12c>)
 8002e76:	441a      	add	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f7ff fcc0 	bl	8002804 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e88:	4b23      	ldr	r3, [pc, #140]	@ (8002f18 <xTaskResumeAll+0x130>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d302      	bcc.n	8002e98 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8002e92:	4b22      	ldr	r3, [pc, #136]	@ (8002f1c <xTaskResumeAll+0x134>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e98:	4b1c      	ldr	r3, [pc, #112]	@ (8002f0c <xTaskResumeAll+0x124>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1cc      	bne.n	8002e3a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ea6:	f000 fa1f 	bl	80032e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8002f20 <xTaskResumeAll+0x138>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d010      	beq.n	8002ed8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002eb6:	f000 f837 	bl	8002f28 <xTaskIncrementTick>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8002ec0:	4b16      	ldr	r3, [pc, #88]	@ (8002f1c <xTaskResumeAll+0x134>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f1      	bne.n	8002eb6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8002ed2:	4b13      	ldr	r3, [pc, #76]	@ (8002f20 <xTaskResumeAll+0x138>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ed8:	4b10      	ldr	r3, [pc, #64]	@ (8002f1c <xTaskResumeAll+0x134>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f24 <xTaskResumeAll+0x13c>)
 8002ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ef4:	f000 fbc0 	bl	8003678 <vPortExitCritical>

	return xAlreadyYielded;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	200004ec 	.word	0x200004ec
 8002f08:	200004c4 	.word	0x200004c4
 8002f0c:	20000484 	.word	0x20000484
 8002f10:	200004cc 	.word	0x200004cc
 8002f14:	200003c8 	.word	0x200003c8
 8002f18:	200003c4 	.word	0x200003c4
 8002f1c:	200004d8 	.word	0x200004d8
 8002f20:	200004d4 	.word	0x200004d4
 8002f24:	e000ed04 	.word	0xe000ed04

08002f28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f32:	4b50      	ldr	r3, [pc, #320]	@ (8003074 <xTaskIncrementTick+0x14c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f040 808b 	bne.w	8003052 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f3c:	4b4e      	ldr	r3, [pc, #312]	@ (8003078 <xTaskIncrementTick+0x150>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3301      	adds	r3, #1
 8002f42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f44:	4a4c      	ldr	r2, [pc, #304]	@ (8003078 <xTaskIncrementTick+0x150>)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d123      	bne.n	8002f98 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f50:	4b4a      	ldr	r3, [pc, #296]	@ (800307c <xTaskIncrementTick+0x154>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00d      	beq.n	8002f76 <xTaskIncrementTick+0x4e>
	__asm volatile
 8002f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f5e:	b672      	cpsid	i
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	b662      	cpsie	i
 8002f6e:	603b      	str	r3, [r7, #0]
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	e7fd      	b.n	8002f72 <xTaskIncrementTick+0x4a>
 8002f76:	4b41      	ldr	r3, [pc, #260]	@ (800307c <xTaskIncrementTick+0x154>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	4b40      	ldr	r3, [pc, #256]	@ (8003080 <xTaskIncrementTick+0x158>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a3e      	ldr	r2, [pc, #248]	@ (800307c <xTaskIncrementTick+0x154>)
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	4a3e      	ldr	r2, [pc, #248]	@ (8003080 <xTaskIncrementTick+0x158>)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	4b3e      	ldr	r3, [pc, #248]	@ (8003084 <xTaskIncrementTick+0x15c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	4a3c      	ldr	r2, [pc, #240]	@ (8003084 <xTaskIncrementTick+0x15c>)
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	f000 f9a8 	bl	80032e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f98:	4b3b      	ldr	r3, [pc, #236]	@ (8003088 <xTaskIncrementTick+0x160>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d348      	bcc.n	8003034 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fa2:	4b36      	ldr	r3, [pc, #216]	@ (800307c <xTaskIncrementTick+0x154>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d104      	bne.n	8002fb6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fac:	4b36      	ldr	r3, [pc, #216]	@ (8003088 <xTaskIncrementTick+0x160>)
 8002fae:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb2:	601a      	str	r2, [r3, #0]
					break;
 8002fb4:	e03e      	b.n	8003034 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fb6:	4b31      	ldr	r3, [pc, #196]	@ (800307c <xTaskIncrementTick+0x154>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d203      	bcs.n	8002fd6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002fce:	4a2e      	ldr	r2, [pc, #184]	@ (8003088 <xTaskIncrementTick+0x160>)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002fd4:	e02e      	b.n	8003034 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fc6f 	bl	80028be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d004      	beq.n	8002ff2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	3318      	adds	r3, #24
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fc66 	bl	80028be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	4b24      	ldr	r3, [pc, #144]	@ (800308c <xTaskIncrementTick+0x164>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	4a22      	ldr	r2, [pc, #136]	@ (800308c <xTaskIncrementTick+0x164>)
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4a1f      	ldr	r2, [pc, #124]	@ (8003090 <xTaskIncrementTick+0x168>)
 8003012:	441a      	add	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	3304      	adds	r3, #4
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f7ff fbf2 	bl	8002804 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003024:	4b1b      	ldr	r3, [pc, #108]	@ (8003094 <xTaskIncrementTick+0x16c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302a:	429a      	cmp	r2, r3
 800302c:	d3b9      	bcc.n	8002fa2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800302e:	2301      	movs	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003032:	e7b6      	b.n	8002fa2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003034:	4b17      	ldr	r3, [pc, #92]	@ (8003094 <xTaskIncrementTick+0x16c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800303a:	4915      	ldr	r1, [pc, #84]	@ (8003090 <xTaskIncrementTick+0x168>)
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d907      	bls.n	800305c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800304c:	2301      	movs	r3, #1
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	e004      	b.n	800305c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003052:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <xTaskIncrementTick+0x170>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3301      	adds	r3, #1
 8003058:	4a0f      	ldr	r2, [pc, #60]	@ (8003098 <xTaskIncrementTick+0x170>)
 800305a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800305c:	4b0f      	ldr	r3, [pc, #60]	@ (800309c <xTaskIncrementTick+0x174>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8003064:	2301      	movs	r3, #1
 8003066:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003068:	697b      	ldr	r3, [r7, #20]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200004ec 	.word	0x200004ec
 8003078:	200004c8 	.word	0x200004c8
 800307c:	2000047c 	.word	0x2000047c
 8003080:	20000480 	.word	0x20000480
 8003084:	200004dc 	.word	0x200004dc
 8003088:	200004e4 	.word	0x200004e4
 800308c:	200004cc 	.word	0x200004cc
 8003090:	200003c8 	.word	0x200003c8
 8003094:	200003c4 	.word	0x200003c4
 8003098:	200004d4 	.word	0x200004d4
 800309c:	200004d8 	.word	0x200004d8

080030a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003154 <vTaskSwitchContext+0xb4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80030ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003158 <vTaskSwitchContext+0xb8>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80030b4:	e047      	b.n	8003146 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80030b6:	4b28      	ldr	r3, [pc, #160]	@ (8003158 <vTaskSwitchContext+0xb8>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030bc:	4b27      	ldr	r3, [pc, #156]	@ (800315c <vTaskSwitchContext+0xbc>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	fab3 f383 	clz	r3, r3
 80030c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80030ca:	7afb      	ldrb	r3, [r7, #11]
 80030cc:	f1c3 031f 	rsb	r3, r3, #31
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	4923      	ldr	r1, [pc, #140]	@ (8003160 <vTaskSwitchContext+0xc0>)
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10d      	bne.n	8003102 <vTaskSwitchContext+0x62>
	__asm volatile
 80030e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ea:	b672      	cpsid	i
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	b662      	cpsie	i
 80030fa:	607b      	str	r3, [r7, #4]
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	e7fd      	b.n	80030fe <vTaskSwitchContext+0x5e>
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4a14      	ldr	r2, [pc, #80]	@ (8003160 <vTaskSwitchContext+0xc0>)
 800310e:	4413      	add	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	3308      	adds	r3, #8
 8003124:	429a      	cmp	r2, r3
 8003126:	d104      	bne.n	8003132 <vTaskSwitchContext+0x92>
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4a0a      	ldr	r2, [pc, #40]	@ (8003164 <vTaskSwitchContext+0xc4>)
 800313a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800313c:	4b09      	ldr	r3, [pc, #36]	@ (8003164 <vTaskSwitchContext+0xc4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	334c      	adds	r3, #76	@ 0x4c
 8003142:	4a09      	ldr	r2, [pc, #36]	@ (8003168 <vTaskSwitchContext+0xc8>)
 8003144:	6013      	str	r3, [r2, #0]
}
 8003146:	bf00      	nop
 8003148:	371c      	adds	r7, #28
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	200004ec 	.word	0x200004ec
 8003158:	200004d8 	.word	0x200004d8
 800315c:	200004cc 	.word	0x200004cc
 8003160:	200003c8 	.word	0x200003c8
 8003164:	200003c4 	.word	0x200003c4
 8003168:	20000010 	.word	0x20000010

0800316c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003174:	f000 f852 	bl	800321c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003178:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <prvIdleTask+0x28>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d9f9      	bls.n	8003174 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003180:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <prvIdleTask+0x2c>)
 8003182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003190:	e7f0      	b.n	8003174 <prvIdleTask+0x8>
 8003192:	bf00      	nop
 8003194:	200003c8 	.word	0x200003c8
 8003198:	e000ed04 	.word	0xe000ed04

0800319c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]
 80031a6:	e00c      	b.n	80031c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4a12      	ldr	r2, [pc, #72]	@ (80031fc <prvInitialiseTaskLists+0x60>)
 80031b4:	4413      	add	r3, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff faf7 	bl	80027aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3301      	adds	r3, #1
 80031c0:	607b      	str	r3, [r7, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b06      	cmp	r3, #6
 80031c6:	d9ef      	bls.n	80031a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80031c8:	480d      	ldr	r0, [pc, #52]	@ (8003200 <prvInitialiseTaskLists+0x64>)
 80031ca:	f7ff faee 	bl	80027aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80031ce:	480d      	ldr	r0, [pc, #52]	@ (8003204 <prvInitialiseTaskLists+0x68>)
 80031d0:	f7ff faeb 	bl	80027aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80031d4:	480c      	ldr	r0, [pc, #48]	@ (8003208 <prvInitialiseTaskLists+0x6c>)
 80031d6:	f7ff fae8 	bl	80027aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80031da:	480c      	ldr	r0, [pc, #48]	@ (800320c <prvInitialiseTaskLists+0x70>)
 80031dc:	f7ff fae5 	bl	80027aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80031e0:	480b      	ldr	r0, [pc, #44]	@ (8003210 <prvInitialiseTaskLists+0x74>)
 80031e2:	f7ff fae2 	bl	80027aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80031e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003214 <prvInitialiseTaskLists+0x78>)
 80031e8:	4a05      	ldr	r2, [pc, #20]	@ (8003200 <prvInitialiseTaskLists+0x64>)
 80031ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80031ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003218 <prvInitialiseTaskLists+0x7c>)
 80031ee:	4a05      	ldr	r2, [pc, #20]	@ (8003204 <prvInitialiseTaskLists+0x68>)
 80031f0:	601a      	str	r2, [r3, #0]
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200003c8 	.word	0x200003c8
 8003200:	20000454 	.word	0x20000454
 8003204:	20000468 	.word	0x20000468
 8003208:	20000484 	.word	0x20000484
 800320c:	20000498 	.word	0x20000498
 8003210:	200004b0 	.word	0x200004b0
 8003214:	2000047c 	.word	0x2000047c
 8003218:	20000480 	.word	0x20000480

0800321c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003222:	e019      	b.n	8003258 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003224:	f000 f9f2 	bl	800360c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003228:	4b10      	ldr	r3, [pc, #64]	@ (800326c <prvCheckTasksWaitingTermination+0x50>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3304      	adds	r3, #4
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fb42 	bl	80028be <uxListRemove>
				--uxCurrentNumberOfTasks;
 800323a:	4b0d      	ldr	r3, [pc, #52]	@ (8003270 <prvCheckTasksWaitingTermination+0x54>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3b01      	subs	r3, #1
 8003240:	4a0b      	ldr	r2, [pc, #44]	@ (8003270 <prvCheckTasksWaitingTermination+0x54>)
 8003242:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <prvCheckTasksWaitingTermination+0x58>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3b01      	subs	r3, #1
 800324a:	4a0a      	ldr	r2, [pc, #40]	@ (8003274 <prvCheckTasksWaitingTermination+0x58>)
 800324c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800324e:	f000 fa13 	bl	8003678 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f810 	bl	8003278 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003258:	4b06      	ldr	r3, [pc, #24]	@ (8003274 <prvCheckTasksWaitingTermination+0x58>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e1      	bne.n	8003224 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20000498 	.word	0x20000498
 8003270:	200004c4 	.word	0x200004c4
 8003274:	200004ac 	.word	0x200004ac

08003278 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	334c      	adds	r3, #76	@ 0x4c
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fc9b 	bl	8003bc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003290:	2b00      	cmp	r3, #0
 8003292:	d108      	bne.n	80032a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fb6d 	bl	8003978 <vPortFree>
				vPortFree( pxTCB );
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fb6a 	bl	8003978 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032a4:	e01b      	b.n	80032de <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d103      	bne.n	80032b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fb61 	bl	8003978 <vPortFree>
	}
 80032b6:	e012      	b.n	80032de <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d00d      	beq.n	80032de <prvDeleteTCB+0x66>
	__asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c6:	b672      	cpsid	i
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	b662      	cpsie	i
 80032d6:	60fb      	str	r3, [r7, #12]
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	e7fd      	b.n	80032da <prvDeleteTCB+0x62>
	}
 80032de:	bf00      	nop
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003320 <prvResetNextTaskUnblockTime+0x38>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d104      	bne.n	8003302 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80032f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003324 <prvResetNextTaskUnblockTime+0x3c>)
 80032fa:	f04f 32ff 	mov.w	r2, #4294967295
 80032fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003300:	e008      	b.n	8003314 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003302:	4b07      	ldr	r3, [pc, #28]	@ (8003320 <prvResetNextTaskUnblockTime+0x38>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a04      	ldr	r2, [pc, #16]	@ (8003324 <prvResetNextTaskUnblockTime+0x3c>)
 8003312:	6013      	str	r3, [r2, #0]
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	2000047c 	.word	0x2000047c
 8003324:	200004e4 	.word	0x200004e4

08003328 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003332:	4b29      	ldr	r3, [pc, #164]	@ (80033d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003338:	4b28      	ldr	r3, [pc, #160]	@ (80033dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3304      	adds	r3, #4
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fabd 	bl	80028be <uxListRemove>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10b      	bne.n	8003362 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800334a:	4b24      	ldr	r3, [pc, #144]	@ (80033dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003350:	2201      	movs	r2, #1
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43da      	mvns	r2, r3
 8003358:	4b21      	ldr	r3, [pc, #132]	@ (80033e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4013      	ands	r3, r2
 800335e:	4a20      	ldr	r2, [pc, #128]	@ (80033e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003360:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d10a      	bne.n	8003380 <prvAddCurrentTaskToDelayedList+0x58>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d007      	beq.n	8003380 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003370:	4b1a      	ldr	r3, [pc, #104]	@ (80033dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3304      	adds	r3, #4
 8003376:	4619      	mov	r1, r3
 8003378:	481a      	ldr	r0, [pc, #104]	@ (80033e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800337a:	f7ff fa43 	bl	8002804 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800337e:	e026      	b.n	80033ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003388:	4b14      	ldr	r3, [pc, #80]	@ (80033dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	429a      	cmp	r2, r3
 8003396:	d209      	bcs.n	80033ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003398:	4b13      	ldr	r3, [pc, #76]	@ (80033e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4b0f      	ldr	r3, [pc, #60]	@ (80033dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3304      	adds	r3, #4
 80033a2:	4619      	mov	r1, r3
 80033a4:	4610      	mov	r0, r2
 80033a6:	f7ff fa51 	bl	800284c <vListInsert>
}
 80033aa:	e010      	b.n	80033ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033ac:	4b0f      	ldr	r3, [pc, #60]	@ (80033ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4b0a      	ldr	r3, [pc, #40]	@ (80033dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3304      	adds	r3, #4
 80033b6:	4619      	mov	r1, r3
 80033b8:	4610      	mov	r0, r2
 80033ba:	f7ff fa47 	bl	800284c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033be:	4b0c      	ldr	r3, [pc, #48]	@ (80033f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d202      	bcs.n	80033ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80033c8:	4a09      	ldr	r2, [pc, #36]	@ (80033f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	6013      	str	r3, [r2, #0]
}
 80033ce:	bf00      	nop
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	200004c8 	.word	0x200004c8
 80033dc:	200003c4 	.word	0x200003c4
 80033e0:	200004cc 	.word	0x200004cc
 80033e4:	200004b0 	.word	0x200004b0
 80033e8:	20000480 	.word	0x20000480
 80033ec:	2000047c 	.word	0x2000047c
 80033f0:	200004e4 	.word	0x200004e4

080033f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3b04      	subs	r3, #4
 8003404:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800340c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	3b04      	subs	r3, #4
 8003412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f023 0201 	bic.w	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	3b04      	subs	r3, #4
 8003422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003424:	4a0c      	ldr	r2, [pc, #48]	@ (8003458 <pxPortInitialiseStack+0x64>)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3b14      	subs	r3, #20
 800342e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3b04      	subs	r3, #4
 800343a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f06f 0202 	mvn.w	r2, #2
 8003442:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3b20      	subs	r3, #32
 8003448:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800344a:	68fb      	ldr	r3, [r7, #12]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	0800345d 	.word	0x0800345d

0800345c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003466:	4b15      	ldr	r3, [pc, #84]	@ (80034bc <prvTaskExitError+0x60>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d00d      	beq.n	800348c <prvTaskExitError+0x30>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003474:	b672      	cpsid	i
 8003476:	f383 8811 	msr	BASEPRI, r3
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	b662      	cpsie	i
 8003484:	60fb      	str	r3, [r7, #12]
}
 8003486:	bf00      	nop
 8003488:	bf00      	nop
 800348a:	e7fd      	b.n	8003488 <prvTaskExitError+0x2c>
	__asm volatile
 800348c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003490:	b672      	cpsid	i
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	b662      	cpsie	i
 80034a0:	60bb      	str	r3, [r7, #8]
}
 80034a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80034a4:	bf00      	nop
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0fc      	beq.n	80034a6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	2000000c 	.word	0x2000000c

080034c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80034c0:	4b07      	ldr	r3, [pc, #28]	@ (80034e0 <pxCurrentTCBConst2>)
 80034c2:	6819      	ldr	r1, [r3, #0]
 80034c4:	6808      	ldr	r0, [r1, #0]
 80034c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ca:	f380 8809 	msr	PSP, r0
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f04f 0000 	mov.w	r0, #0
 80034d6:	f380 8811 	msr	BASEPRI, r0
 80034da:	4770      	bx	lr
 80034dc:	f3af 8000 	nop.w

080034e0 <pxCurrentTCBConst2>:
 80034e0:	200003c4 	.word	0x200003c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop

080034e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80034e8:	4808      	ldr	r0, [pc, #32]	@ (800350c <prvPortStartFirstTask+0x24>)
 80034ea:	6800      	ldr	r0, [r0, #0]
 80034ec:	6800      	ldr	r0, [r0, #0]
 80034ee:	f380 8808 	msr	MSP, r0
 80034f2:	f04f 0000 	mov.w	r0, #0
 80034f6:	f380 8814 	msr	CONTROL, r0
 80034fa:	b662      	cpsie	i
 80034fc:	b661      	cpsie	f
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	df00      	svc	0
 8003508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800350a:	bf00      	nop
 800350c:	e000ed08 	.word	0xe000ed08

08003510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003516:	4b37      	ldr	r3, [pc, #220]	@ (80035f4 <xPortStartScheduler+0xe4>)
 8003518:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	b2db      	uxtb	r3, r3
 8003520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	22ff      	movs	r2, #255	@ 0xff
 8003526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003538:	b2da      	uxtb	r2, r3
 800353a:	4b2f      	ldr	r3, [pc, #188]	@ (80035f8 <xPortStartScheduler+0xe8>)
 800353c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800353e:	4b2f      	ldr	r3, [pc, #188]	@ (80035fc <xPortStartScheduler+0xec>)
 8003540:	2207      	movs	r2, #7
 8003542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003544:	e009      	b.n	800355a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003546:	4b2d      	ldr	r3, [pc, #180]	@ (80035fc <xPortStartScheduler+0xec>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3b01      	subs	r3, #1
 800354c:	4a2b      	ldr	r2, [pc, #172]	@ (80035fc <xPortStartScheduler+0xec>)
 800354e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	b2db      	uxtb	r3, r3
 8003558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003562:	2b80      	cmp	r3, #128	@ 0x80
 8003564:	d0ef      	beq.n	8003546 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003566:	4b25      	ldr	r3, [pc, #148]	@ (80035fc <xPortStartScheduler+0xec>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f1c3 0307 	rsb	r3, r3, #7
 800356e:	2b04      	cmp	r3, #4
 8003570:	d00d      	beq.n	800358e <xPortStartScheduler+0x7e>
	__asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003576:	b672      	cpsid	i
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	b662      	cpsie	i
 8003586:	60bb      	str	r3, [r7, #8]
}
 8003588:	bf00      	nop
 800358a:	bf00      	nop
 800358c:	e7fd      	b.n	800358a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800358e:	4b1b      	ldr	r3, [pc, #108]	@ (80035fc <xPortStartScheduler+0xec>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	4a19      	ldr	r2, [pc, #100]	@ (80035fc <xPortStartScheduler+0xec>)
 8003596:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003598:	4b18      	ldr	r3, [pc, #96]	@ (80035fc <xPortStartScheduler+0xec>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035a0:	4a16      	ldr	r2, [pc, #88]	@ (80035fc <xPortStartScheduler+0xec>)
 80035a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80035ac:	4b14      	ldr	r3, [pc, #80]	@ (8003600 <xPortStartScheduler+0xf0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a13      	ldr	r2, [pc, #76]	@ (8003600 <xPortStartScheduler+0xf0>)
 80035b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80035b8:	4b11      	ldr	r3, [pc, #68]	@ (8003600 <xPortStartScheduler+0xf0>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a10      	ldr	r2, [pc, #64]	@ (8003600 <xPortStartScheduler+0xf0>)
 80035be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80035c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80035c4:	f000 f8dc 	bl	8003780 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80035c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003604 <xPortStartScheduler+0xf4>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80035ce:	f000 f8fb 	bl	80037c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80035d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003608 <xPortStartScheduler+0xf8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a0c      	ldr	r2, [pc, #48]	@ (8003608 <xPortStartScheduler+0xf8>)
 80035d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80035dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80035de:	f7ff ff83 	bl	80034e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80035e2:	f7ff fd5d 	bl	80030a0 <vTaskSwitchContext>
	prvTaskExitError();
 80035e6:	f7ff ff39 	bl	800345c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	e000e400 	.word	0xe000e400
 80035f8:	200004f0 	.word	0x200004f0
 80035fc:	200004f4 	.word	0x200004f4
 8003600:	e000ed20 	.word	0xe000ed20
 8003604:	2000000c 	.word	0x2000000c
 8003608:	e000ef34 	.word	0xe000ef34

0800360c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
	__asm volatile
 8003612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003616:	b672      	cpsid	i
 8003618:	f383 8811 	msr	BASEPRI, r3
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	b662      	cpsie	i
 8003626:	607b      	str	r3, [r7, #4]
}
 8003628:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800362a:	4b11      	ldr	r3, [pc, #68]	@ (8003670 <vPortEnterCritical+0x64>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3301      	adds	r3, #1
 8003630:	4a0f      	ldr	r2, [pc, #60]	@ (8003670 <vPortEnterCritical+0x64>)
 8003632:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003634:	4b0e      	ldr	r3, [pc, #56]	@ (8003670 <vPortEnterCritical+0x64>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d112      	bne.n	8003662 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800363c:	4b0d      	ldr	r3, [pc, #52]	@ (8003674 <vPortEnterCritical+0x68>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00d      	beq.n	8003662 <vPortEnterCritical+0x56>
	__asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800364a:	b672      	cpsid	i
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	b662      	cpsie	i
 800365a:	603b      	str	r3, [r7, #0]
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	e7fd      	b.n	800365e <vPortEnterCritical+0x52>
	}
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	2000000c 	.word	0x2000000c
 8003674:	e000ed04 	.word	0xe000ed04

08003678 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800367e:	4b13      	ldr	r3, [pc, #76]	@ (80036cc <vPortExitCritical+0x54>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10d      	bne.n	80036a2 <vPortExitCritical+0x2a>
	__asm volatile
 8003686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368a:	b672      	cpsid	i
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	b662      	cpsie	i
 800369a:	607b      	str	r3, [r7, #4]
}
 800369c:	bf00      	nop
 800369e:	bf00      	nop
 80036a0:	e7fd      	b.n	800369e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80036a2:	4b0a      	ldr	r3, [pc, #40]	@ (80036cc <vPortExitCritical+0x54>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	4a08      	ldr	r2, [pc, #32]	@ (80036cc <vPortExitCritical+0x54>)
 80036aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80036ac:	4b07      	ldr	r3, [pc, #28]	@ (80036cc <vPortExitCritical+0x54>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d105      	bne.n	80036c0 <vPortExitCritical+0x48>
 80036b4:	2300      	movs	r3, #0
 80036b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80036be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	2000000c 	.word	0x2000000c

080036d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80036d0:	f3ef 8009 	mrs	r0, PSP
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	4b15      	ldr	r3, [pc, #84]	@ (8003730 <pxCurrentTCBConst>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	f01e 0f10 	tst.w	lr, #16
 80036e0:	bf08      	it	eq
 80036e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80036e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ea:	6010      	str	r0, [r2, #0]
 80036ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80036f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80036f4:	b672      	cpsid	i
 80036f6:	f380 8811 	msr	BASEPRI, r0
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	b662      	cpsie	i
 8003704:	f7ff fccc 	bl	80030a0 <vTaskSwitchContext>
 8003708:	f04f 0000 	mov.w	r0, #0
 800370c:	f380 8811 	msr	BASEPRI, r0
 8003710:	bc09      	pop	{r0, r3}
 8003712:	6819      	ldr	r1, [r3, #0]
 8003714:	6808      	ldr	r0, [r1, #0]
 8003716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371a:	f01e 0f10 	tst.w	lr, #16
 800371e:	bf08      	it	eq
 8003720:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003724:	f380 8809 	msr	PSP, r0
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop

08003730 <pxCurrentTCBConst>:
 8003730:	200003c4 	.word	0x200003c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop

08003738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
	__asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003742:	b672      	cpsid	i
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	b662      	cpsie	i
 8003752:	607b      	str	r3, [r7, #4]
}
 8003754:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003756:	f7ff fbe7 	bl	8002f28 <xTaskIncrementTick>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003760:	4b06      	ldr	r3, [pc, #24]	@ (800377c <SysTick_Handler+0x44>)
 8003762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	2300      	movs	r3, #0
 800376a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	f383 8811 	msr	BASEPRI, r3
}
 8003772:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003774:	bf00      	nop
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	e000ed04 	.word	0xe000ed04

08003780 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003784:	4b0b      	ldr	r3, [pc, #44]	@ (80037b4 <vPortSetupTimerInterrupt+0x34>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800378a:	4b0b      	ldr	r3, [pc, #44]	@ (80037b8 <vPortSetupTimerInterrupt+0x38>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003790:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <vPortSetupTimerInterrupt+0x3c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a0a      	ldr	r2, [pc, #40]	@ (80037c0 <vPortSetupTimerInterrupt+0x40>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	099b      	lsrs	r3, r3, #6
 800379c:	4a09      	ldr	r2, [pc, #36]	@ (80037c4 <vPortSetupTimerInterrupt+0x44>)
 800379e:	3b01      	subs	r3, #1
 80037a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037a2:	4b04      	ldr	r3, [pc, #16]	@ (80037b4 <vPortSetupTimerInterrupt+0x34>)
 80037a4:	2207      	movs	r2, #7
 80037a6:	601a      	str	r2, [r3, #0]
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	e000e010 	.word	0xe000e010
 80037b8:	e000e018 	.word	0xe000e018
 80037bc:	20000000 	.word	0x20000000
 80037c0:	10624dd3 	.word	0x10624dd3
 80037c4:	e000e014 	.word	0xe000e014

080037c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80037c8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80037d8 <vPortEnableVFP+0x10>
 80037cc:	6801      	ldr	r1, [r0, #0]
 80037ce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80037d2:	6001      	str	r1, [r0, #0]
 80037d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80037d6:	bf00      	nop
 80037d8:	e000ed88 	.word	0xe000ed88

080037dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	@ 0x28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80037e8:	f7ff faf0 	bl	8002dcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80037ec:	4b5d      	ldr	r3, [pc, #372]	@ (8003964 <pvPortMalloc+0x188>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80037f4:	f000 f920 	bl	8003a38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80037f8:	4b5b      	ldr	r3, [pc, #364]	@ (8003968 <pvPortMalloc+0x18c>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	f040 8094 	bne.w	800392e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d020      	beq.n	800384e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800380c:	2208      	movs	r2, #8
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	2b00      	cmp	r3, #0
 800381c:	d017      	beq.n	800384e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f023 0307 	bic.w	r3, r3, #7
 8003824:	3308      	adds	r3, #8
 8003826:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00d      	beq.n	800384e <pvPortMalloc+0x72>
	__asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003836:	b672      	cpsid	i
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	b662      	cpsie	i
 8003846:	617b      	str	r3, [r7, #20]
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	e7fd      	b.n	800384a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d06c      	beq.n	800392e <pvPortMalloc+0x152>
 8003854:	4b45      	ldr	r3, [pc, #276]	@ (800396c <pvPortMalloc+0x190>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	429a      	cmp	r2, r3
 800385c:	d867      	bhi.n	800392e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800385e:	4b44      	ldr	r3, [pc, #272]	@ (8003970 <pvPortMalloc+0x194>)
 8003860:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003862:	4b43      	ldr	r3, [pc, #268]	@ (8003970 <pvPortMalloc+0x194>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003868:	e004      	b.n	8003874 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	429a      	cmp	r2, r3
 800387c:	d903      	bls.n	8003886 <pvPortMalloc+0xaa>
 800387e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f1      	bne.n	800386a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003886:	4b37      	ldr	r3, [pc, #220]	@ (8003964 <pvPortMalloc+0x188>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800388c:	429a      	cmp	r2, r3
 800388e:	d04e      	beq.n	800392e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2208      	movs	r2, #8
 8003896:	4413      	add	r3, r2
 8003898:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	1ad2      	subs	r2, r2, r3
 80038aa:	2308      	movs	r3, #8
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d922      	bls.n	80038f8 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80038b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4413      	add	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00d      	beq.n	80038e0 <pvPortMalloc+0x104>
	__asm volatile
 80038c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c8:	b672      	cpsid	i
 80038ca:	f383 8811 	msr	BASEPRI, r3
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	b662      	cpsie	i
 80038d8:	613b      	str	r3, [r7, #16]
}
 80038da:	bf00      	nop
 80038dc:	bf00      	nop
 80038de:	e7fd      	b.n	80038dc <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	1ad2      	subs	r2, r2, r3
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038f2:	69b8      	ldr	r0, [r7, #24]
 80038f4:	f000 f902 	bl	8003afc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038f8:	4b1c      	ldr	r3, [pc, #112]	@ (800396c <pvPortMalloc+0x190>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	4a1a      	ldr	r2, [pc, #104]	@ (800396c <pvPortMalloc+0x190>)
 8003904:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003906:	4b19      	ldr	r3, [pc, #100]	@ (800396c <pvPortMalloc+0x190>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	4b1a      	ldr	r3, [pc, #104]	@ (8003974 <pvPortMalloc+0x198>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d203      	bcs.n	800391a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003912:	4b16      	ldr	r3, [pc, #88]	@ (800396c <pvPortMalloc+0x190>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a17      	ldr	r2, [pc, #92]	@ (8003974 <pvPortMalloc+0x198>)
 8003918:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	4b12      	ldr	r3, [pc, #72]	@ (8003968 <pvPortMalloc+0x18c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	431a      	orrs	r2, r3
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800392e:	f7ff fa5b 	bl	8002de8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00d      	beq.n	8003958 <pvPortMalloc+0x17c>
	__asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003940:	b672      	cpsid	i
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	b662      	cpsie	i
 8003950:	60fb      	str	r3, [r7, #12]
}
 8003952:	bf00      	nop
 8003954:	bf00      	nop
 8003956:	e7fd      	b.n	8003954 <pvPortMalloc+0x178>
	return pvReturn;
 8003958:	69fb      	ldr	r3, [r7, #28]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3728      	adds	r7, #40	@ 0x28
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20004100 	.word	0x20004100
 8003968:	2000410c 	.word	0x2000410c
 800396c:	20004104 	.word	0x20004104
 8003970:	200040f8 	.word	0x200040f8
 8003974:	20004108 	.word	0x20004108

08003978 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d04e      	beq.n	8003a28 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800398a:	2308      	movs	r3, #8
 800398c:	425b      	negs	r3, r3
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4413      	add	r3, r2
 8003992:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	4b24      	ldr	r3, [pc, #144]	@ (8003a30 <vPortFree+0xb8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10d      	bne.n	80039c2 <vPortFree+0x4a>
	__asm volatile
 80039a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039aa:	b672      	cpsid	i
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	b662      	cpsie	i
 80039ba:	60fb      	str	r3, [r7, #12]
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	e7fd      	b.n	80039be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00d      	beq.n	80039e6 <vPortFree+0x6e>
	__asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ce:	b672      	cpsid	i
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	b662      	cpsie	i
 80039de:	60bb      	str	r3, [r7, #8]
}
 80039e0:	bf00      	nop
 80039e2:	bf00      	nop
 80039e4:	e7fd      	b.n	80039e2 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	4b11      	ldr	r3, [pc, #68]	@ (8003a30 <vPortFree+0xb8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d019      	beq.n	8003a28 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d115      	bne.n	8003a28 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	4b0b      	ldr	r3, [pc, #44]	@ (8003a30 <vPortFree+0xb8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	43db      	mvns	r3, r3
 8003a06:	401a      	ands	r2, r3
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a0c:	f7ff f9de 	bl	8002dcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	4b07      	ldr	r3, [pc, #28]	@ (8003a34 <vPortFree+0xbc>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4413      	add	r3, r2
 8003a1a:	4a06      	ldr	r2, [pc, #24]	@ (8003a34 <vPortFree+0xbc>)
 8003a1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a1e:	6938      	ldr	r0, [r7, #16]
 8003a20:	f000 f86c 	bl	8003afc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003a24:	f7ff f9e0 	bl	8002de8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a28:	bf00      	nop
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	2000410c 	.word	0x2000410c
 8003a34:	20004104 	.word	0x20004104

08003a38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a3e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003a42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003a44:	4b27      	ldr	r3, [pc, #156]	@ (8003ae4 <prvHeapInit+0xac>)
 8003a46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00c      	beq.n	8003a6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	3307      	adds	r3, #7
 8003a56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0307 	bic.w	r3, r3, #7
 8003a5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae4 <prvHeapInit+0xac>)
 8003a68:	4413      	add	r3, r2
 8003a6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a70:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae8 <prvHeapInit+0xb0>)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003a76:	4b1c      	ldr	r3, [pc, #112]	@ (8003ae8 <prvHeapInit+0xb0>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	4413      	add	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003a84:	2208      	movs	r2, #8
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0307 	bic.w	r3, r3, #7
 8003a92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4a15      	ldr	r2, [pc, #84]	@ (8003aec <prvHeapInit+0xb4>)
 8003a98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003a9a:	4b14      	ldr	r3, [pc, #80]	@ (8003aec <prvHeapInit+0xb4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003aa2:	4b12      	ldr	r3, [pc, #72]	@ (8003aec <prvHeapInit+0xb4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	1ad2      	subs	r2, r2, r3
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8003aec <prvHeapInit+0xb4>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8003af0 <prvHeapInit+0xb8>)
 8003ac6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4a09      	ldr	r2, [pc, #36]	@ (8003af4 <prvHeapInit+0xbc>)
 8003ace:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ad0:	4b09      	ldr	r3, [pc, #36]	@ (8003af8 <prvHeapInit+0xc0>)
 8003ad2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003ad6:	601a      	str	r2, [r3, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	200004f8 	.word	0x200004f8
 8003ae8:	200040f8 	.word	0x200040f8
 8003aec:	20004100 	.word	0x20004100
 8003af0:	20004108 	.word	0x20004108
 8003af4:	20004104 	.word	0x20004104
 8003af8:	2000410c 	.word	0x2000410c

08003afc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b04:	4b28      	ldr	r3, [pc, #160]	@ (8003ba8 <prvInsertBlockIntoFreeList+0xac>)
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	e002      	b.n	8003b10 <prvInsertBlockIntoFreeList+0x14>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d8f7      	bhi.n	8003b0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	4413      	add	r3, r2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d108      	bne.n	8003b3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	441a      	add	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	441a      	add	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d118      	bne.n	8003b84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	4b15      	ldr	r3, [pc, #84]	@ (8003bac <prvInsertBlockIntoFreeList+0xb0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d00d      	beq.n	8003b7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	441a      	add	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	e008      	b.n	8003b8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003bac <prvInsertBlockIntoFreeList+0xb0>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	e003      	b.n	8003b8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d002      	beq.n	8003b9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	200040f8 	.word	0x200040f8
 8003bac:	20004100 	.word	0x20004100

08003bb0 <memset>:
 8003bb0:	4402      	add	r2, r0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d100      	bne.n	8003bba <memset+0xa>
 8003bb8:	4770      	bx	lr
 8003bba:	f803 1b01 	strb.w	r1, [r3], #1
 8003bbe:	e7f9      	b.n	8003bb4 <memset+0x4>

08003bc0 <_reclaim_reent>:
 8003bc0:	4b29      	ldr	r3, [pc, #164]	@ (8003c68 <_reclaim_reent+0xa8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4283      	cmp	r3, r0
 8003bc6:	b570      	push	{r4, r5, r6, lr}
 8003bc8:	4604      	mov	r4, r0
 8003bca:	d04b      	beq.n	8003c64 <_reclaim_reent+0xa4>
 8003bcc:	69c3      	ldr	r3, [r0, #28]
 8003bce:	b1ab      	cbz	r3, 8003bfc <_reclaim_reent+0x3c>
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	b16b      	cbz	r3, 8003bf0 <_reclaim_reent+0x30>
 8003bd4:	2500      	movs	r5, #0
 8003bd6:	69e3      	ldr	r3, [r4, #28]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	5959      	ldr	r1, [r3, r5]
 8003bdc:	2900      	cmp	r1, #0
 8003bde:	d13b      	bne.n	8003c58 <_reclaim_reent+0x98>
 8003be0:	3504      	adds	r5, #4
 8003be2:	2d80      	cmp	r5, #128	@ 0x80
 8003be4:	d1f7      	bne.n	8003bd6 <_reclaim_reent+0x16>
 8003be6:	69e3      	ldr	r3, [r4, #28]
 8003be8:	4620      	mov	r0, r4
 8003bea:	68d9      	ldr	r1, [r3, #12]
 8003bec:	f000 f864 	bl	8003cb8 <_free_r>
 8003bf0:	69e3      	ldr	r3, [r4, #28]
 8003bf2:	6819      	ldr	r1, [r3, #0]
 8003bf4:	b111      	cbz	r1, 8003bfc <_reclaim_reent+0x3c>
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f000 f85e 	bl	8003cb8 <_free_r>
 8003bfc:	6961      	ldr	r1, [r4, #20]
 8003bfe:	b111      	cbz	r1, 8003c06 <_reclaim_reent+0x46>
 8003c00:	4620      	mov	r0, r4
 8003c02:	f000 f859 	bl	8003cb8 <_free_r>
 8003c06:	69e1      	ldr	r1, [r4, #28]
 8003c08:	b111      	cbz	r1, 8003c10 <_reclaim_reent+0x50>
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f000 f854 	bl	8003cb8 <_free_r>
 8003c10:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003c12:	b111      	cbz	r1, 8003c1a <_reclaim_reent+0x5a>
 8003c14:	4620      	mov	r0, r4
 8003c16:	f000 f84f 	bl	8003cb8 <_free_r>
 8003c1a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c1c:	b111      	cbz	r1, 8003c24 <_reclaim_reent+0x64>
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f000 f84a 	bl	8003cb8 <_free_r>
 8003c24:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003c26:	b111      	cbz	r1, 8003c2e <_reclaim_reent+0x6e>
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f000 f845 	bl	8003cb8 <_free_r>
 8003c2e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003c30:	b111      	cbz	r1, 8003c38 <_reclaim_reent+0x78>
 8003c32:	4620      	mov	r0, r4
 8003c34:	f000 f840 	bl	8003cb8 <_free_r>
 8003c38:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003c3a:	b111      	cbz	r1, 8003c42 <_reclaim_reent+0x82>
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f000 f83b 	bl	8003cb8 <_free_r>
 8003c42:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003c44:	b111      	cbz	r1, 8003c4c <_reclaim_reent+0x8c>
 8003c46:	4620      	mov	r0, r4
 8003c48:	f000 f836 	bl	8003cb8 <_free_r>
 8003c4c:	6a23      	ldr	r3, [r4, #32]
 8003c4e:	b14b      	cbz	r3, 8003c64 <_reclaim_reent+0xa4>
 8003c50:	4620      	mov	r0, r4
 8003c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003c56:	4718      	bx	r3
 8003c58:	680e      	ldr	r6, [r1, #0]
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f000 f82c 	bl	8003cb8 <_free_r>
 8003c60:	4631      	mov	r1, r6
 8003c62:	e7bb      	b.n	8003bdc <_reclaim_reent+0x1c>
 8003c64:	bd70      	pop	{r4, r5, r6, pc}
 8003c66:	bf00      	nop
 8003c68:	20000010 	.word	0x20000010

08003c6c <__libc_init_array>:
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	4d0d      	ldr	r5, [pc, #52]	@ (8003ca4 <__libc_init_array+0x38>)
 8003c70:	4c0d      	ldr	r4, [pc, #52]	@ (8003ca8 <__libc_init_array+0x3c>)
 8003c72:	1b64      	subs	r4, r4, r5
 8003c74:	10a4      	asrs	r4, r4, #2
 8003c76:	2600      	movs	r6, #0
 8003c78:	42a6      	cmp	r6, r4
 8003c7a:	d109      	bne.n	8003c90 <__libc_init_array+0x24>
 8003c7c:	4d0b      	ldr	r5, [pc, #44]	@ (8003cac <__libc_init_array+0x40>)
 8003c7e:	4c0c      	ldr	r4, [pc, #48]	@ (8003cb0 <__libc_init_array+0x44>)
 8003c80:	f000 f870 	bl	8003d64 <_init>
 8003c84:	1b64      	subs	r4, r4, r5
 8003c86:	10a4      	asrs	r4, r4, #2
 8003c88:	2600      	movs	r6, #0
 8003c8a:	42a6      	cmp	r6, r4
 8003c8c:	d105      	bne.n	8003c9a <__libc_init_array+0x2e>
 8003c8e:	bd70      	pop	{r4, r5, r6, pc}
 8003c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c94:	4798      	blx	r3
 8003c96:	3601      	adds	r6, #1
 8003c98:	e7ee      	b.n	8003c78 <__libc_init_array+0xc>
 8003c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c9e:	4798      	blx	r3
 8003ca0:	3601      	adds	r6, #1
 8003ca2:	e7f2      	b.n	8003c8a <__libc_init_array+0x1e>
 8003ca4:	08003e4c 	.word	0x08003e4c
 8003ca8:	08003e4c 	.word	0x08003e4c
 8003cac:	08003e4c 	.word	0x08003e4c
 8003cb0:	08003e50 	.word	0x08003e50

08003cb4 <__retarget_lock_acquire_recursive>:
 8003cb4:	4770      	bx	lr

08003cb6 <__retarget_lock_release_recursive>:
 8003cb6:	4770      	bx	lr

08003cb8 <_free_r>:
 8003cb8:	b538      	push	{r3, r4, r5, lr}
 8003cba:	4605      	mov	r5, r0
 8003cbc:	2900      	cmp	r1, #0
 8003cbe:	d041      	beq.n	8003d44 <_free_r+0x8c>
 8003cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cc4:	1f0c      	subs	r4, r1, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	bfb8      	it	lt
 8003cca:	18e4      	addlt	r4, r4, r3
 8003ccc:	f000 f83e 	bl	8003d4c <__malloc_lock>
 8003cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d48 <_free_r+0x90>)
 8003cd2:	6813      	ldr	r3, [r2, #0]
 8003cd4:	b933      	cbnz	r3, 8003ce4 <_free_r+0x2c>
 8003cd6:	6063      	str	r3, [r4, #4]
 8003cd8:	6014      	str	r4, [r2, #0]
 8003cda:	4628      	mov	r0, r5
 8003cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ce0:	f000 b83a 	b.w	8003d58 <__malloc_unlock>
 8003ce4:	42a3      	cmp	r3, r4
 8003ce6:	d908      	bls.n	8003cfa <_free_r+0x42>
 8003ce8:	6820      	ldr	r0, [r4, #0]
 8003cea:	1821      	adds	r1, r4, r0
 8003cec:	428b      	cmp	r3, r1
 8003cee:	bf01      	itttt	eq
 8003cf0:	6819      	ldreq	r1, [r3, #0]
 8003cf2:	685b      	ldreq	r3, [r3, #4]
 8003cf4:	1809      	addeq	r1, r1, r0
 8003cf6:	6021      	streq	r1, [r4, #0]
 8003cf8:	e7ed      	b.n	8003cd6 <_free_r+0x1e>
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	b10b      	cbz	r3, 8003d04 <_free_r+0x4c>
 8003d00:	42a3      	cmp	r3, r4
 8003d02:	d9fa      	bls.n	8003cfa <_free_r+0x42>
 8003d04:	6811      	ldr	r1, [r2, #0]
 8003d06:	1850      	adds	r0, r2, r1
 8003d08:	42a0      	cmp	r0, r4
 8003d0a:	d10b      	bne.n	8003d24 <_free_r+0x6c>
 8003d0c:	6820      	ldr	r0, [r4, #0]
 8003d0e:	4401      	add	r1, r0
 8003d10:	1850      	adds	r0, r2, r1
 8003d12:	4283      	cmp	r3, r0
 8003d14:	6011      	str	r1, [r2, #0]
 8003d16:	d1e0      	bne.n	8003cda <_free_r+0x22>
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	6053      	str	r3, [r2, #4]
 8003d1e:	4408      	add	r0, r1
 8003d20:	6010      	str	r0, [r2, #0]
 8003d22:	e7da      	b.n	8003cda <_free_r+0x22>
 8003d24:	d902      	bls.n	8003d2c <_free_r+0x74>
 8003d26:	230c      	movs	r3, #12
 8003d28:	602b      	str	r3, [r5, #0]
 8003d2a:	e7d6      	b.n	8003cda <_free_r+0x22>
 8003d2c:	6820      	ldr	r0, [r4, #0]
 8003d2e:	1821      	adds	r1, r4, r0
 8003d30:	428b      	cmp	r3, r1
 8003d32:	bf04      	itt	eq
 8003d34:	6819      	ldreq	r1, [r3, #0]
 8003d36:	685b      	ldreq	r3, [r3, #4]
 8003d38:	6063      	str	r3, [r4, #4]
 8003d3a:	bf04      	itt	eq
 8003d3c:	1809      	addeq	r1, r1, r0
 8003d3e:	6021      	streq	r1, [r4, #0]
 8003d40:	6054      	str	r4, [r2, #4]
 8003d42:	e7ca      	b.n	8003cda <_free_r+0x22>
 8003d44:	bd38      	pop	{r3, r4, r5, pc}
 8003d46:	bf00      	nop
 8003d48:	2000424c 	.word	0x2000424c

08003d4c <__malloc_lock>:
 8003d4c:	4801      	ldr	r0, [pc, #4]	@ (8003d54 <__malloc_lock+0x8>)
 8003d4e:	f7ff bfb1 	b.w	8003cb4 <__retarget_lock_acquire_recursive>
 8003d52:	bf00      	nop
 8003d54:	20004248 	.word	0x20004248

08003d58 <__malloc_unlock>:
 8003d58:	4801      	ldr	r0, [pc, #4]	@ (8003d60 <__malloc_unlock+0x8>)
 8003d5a:	f7ff bfac 	b.w	8003cb6 <__retarget_lock_release_recursive>
 8003d5e:	bf00      	nop
 8003d60:	20004248 	.word	0x20004248

08003d64 <_init>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	bf00      	nop
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr

08003d70 <_fini>:
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d72:	bf00      	nop
 8003d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d76:	bc08      	pop	{r3}
 8003d78:	469e      	mov	lr, r3
 8003d7a:	4770      	bx	lr
